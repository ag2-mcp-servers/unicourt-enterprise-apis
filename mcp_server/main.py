# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:26:44+00:00



import argparse
import json
import os
from datetime import date as date_aliased
from datetime import datetime
from typing import *
from typing import Optional, Union

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity, HTTPBearer
from fastapi import Path, Query
from pydantic import conint, constr

from models import (
    AccessTokenIdListResponse,
    AccessTokenRequest,
    AccessTokenResponse,
    AreaOfLaw,
    AreaOfLawResponse,
    AssociatedNormAttorneyResponse,
    AssociatedNormJudgeResponse,
    AssociatedNormLawFirmResponse,
    AssociatedNormPartyResponse,
    Attorney,
    AttorneyRepresentationType,
    AttorneyRepresentationTypeResponse,
    Attorneys,
    AttorneyType,
    AttorneyTypeResponse,
    BillingCyclesResponse,
    BillingCycleUsageResponse,
    CallbackListResponse,
    Case,
    CaseClass,
    CaseClassResponse,
    CaseCountAnalyticsByAreaOfLawResponse,
    CaseCountAnalyticsByCaseClassResponse,
    CaseCountAnalyticsByCaseFiledDateResponse,
    CaseCountAnalyticsByCaseTypeGroupResponse,
    CaseCountAnalyticsByCaseTypeResponse,
    CaseCountAnalyticsByCourtLocationResponse,
    CaseCountAnalyticsByCourtResponse,
    CaseCountAnalyticsByCourtSystemResponse,
    CaseCountAnalyticsByCourtTypeResponse,
    CaseCountAnalyticsByJurisdictionGeoResponse,
    CaseCountAnalyticsByNormAttorneyResponse,
    CaseCountAnalyticsByNormJudgeResponse,
    CaseCountAnalyticsByNormLawFirmResponse,
    CaseCountAnalyticsByNormPartyResponse,
    CaseCountAnalyticsByPartyRoleGroupResponse,
    CaseCountAnalyticsByPartyRoleResponse,
    CaseDocument,
    CaseDocumentDownloadCaseDocumentIdGetResponse,
    CaseDocumentOrderCallback,
    CaseDocumentOrderCallbackListResponse,
    CaseDocumentOrderRequest,
    CaseDocuments,
    CaseExportCallback,
    CaseExportCallbackListResponse,
    CaseRelationshipType,
    CaseRelationshipTypeResponse,
    CaseSearchResponse,
    CaseStatus,
    CaseStatus1,
    CaseStatusGroup,
    CaseStatusGroupResponse,
    CaseStatusResponse,
    CaseTrack,
    CaseTrackListResponse,
    CaseTrackRequest,
    CaseType,
    CaseTypeArray,
    CaseTypeGroup,
    CaseTypeGroupResponse,
    CaseTypeResponse,
    CaseUpdate,
    CaseUpdateListResponse,
    CaseUpdateRequest,
    CauseOfAction,
    CauseOfActionAdditionalData,
    CauseOfActionAdditionalDataResponse,
    CauseOfActionGroup,
    CauseOfActionGroupResponse,
    CauseOfActionResponse,
    Charge,
    ChargeAdditionalData,
    ChargeAdditionalDataResponse,
    ChargeDegree,
    ChargeDegreeResponse,
    ChargeGroup,
    ChargeGroupResponse,
    ChargeResponse,
    ChargeSeverity,
    ChargeSeverityResponse,
    Court,
    CourtCoverage,
    CourtLocation,
    CourtLocationResponse,
    CourtRegionIdArray,
    CourtResponse,
    CourtServiceStatus,
    CourtServiceStatusResponse,
    CourtSystem,
    CourtSystemResponse,
    CourtType,
    CourtTypeResponse,
    DailyUsageResponse,
    DocketEntries,
    DocketEntryPrimaryDocuments,
    DocketEntrySecondaryDocuments,
    Exception,
    FederalBankruptcyChapterArray,
    GroupBy,
    Hearings,
    InvalidateAccessTokenRequest,
    Judge,
    Judges,
    JudgeType,
    JudgeTypeResponse,
    JurisdictionGeo,
    JurisdictionGeoResponse,
    NatureOfSuitsArray,
    NormAttorney,
    NormAttorneySearchResponse,
    NormJudge,
    NormJudgeSearchResponse,
    NormLawFirm,
    NormLawFirmSearchResponse,
    NormParty,
    NormPartySearchResponse,
    Order,
    PacerCredential,
    PacerCredentialListResponse,
    PacerCredentialRequest,
    PACERImportCase,
    Parties,
    Party,
    PartyAttorneyAssociations,
    PartyClassificationType1,
    PartyRole,
    PartyRoleArray,
    PartyRoleGroup,
    PartyRoleGroupResponse,
    PartyRoleResponse,
    PCLCase,
    PCLParty,
    RelatedCases,
    Sort,
    Sort2,
    Sort42,
    Sort44,
    Sort56,
    Sort58,
    SortBy,
    Status6,
    Success,
)

app = MCPProxy(
    description='<button><a href="/enterpriseapi/download/UniCourt-Enterprise-API-Spec.yaml" >Download UniCourt Enterprise APIs Specification</a></button>\n',
    title='UniCourt Enterprise APIs',
    version='1.0.0',
    servers=[{'url': 'https://enterpriseapi.unicourt.com/'}],
)


@app.get(
    '/attorney/{attorneyId}',
    description=""" Retrieve the attorney with the specified attorneyId value. """,
    tags=['attorney_operations', 'attorney_representation_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_attorney_by_id(
    attorney_id: constr(min_length=18, max_length=18) = Path(..., alias='attorneyId')
):
    """
    Gets details for a requested Attorney ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/attorney/{attorneyId}/associatedParties',
    description=""" Retrieve the parties represented by the attorney with the specified attorneyId value. """,
    tags=[
        'attorney_operations',
        'party_association_management',
        'party_information_retrieval',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_attorney_associated_parties(
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    attorney_id: constr(min_length=18, max_length=18) = Path(..., alias='attorneyId'),
):
    """
    Gets Associated Party details for a requested Attorney ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/billingCycleUsage/{billingCycle}',
    description=""" An endpoint to obtain information on API usage for a specific billing cycle. """,
    tags=['billing_operations', 'api_usage_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_billing_usage_by_billing_cycle(
    billing_cycle: date_aliased = Path(..., alias='billingCycle')
):
    """
    Specify the billing cycle to know the API usage.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/billingCycles',
    description=""" An endpoint to obtain information on the previous 12 billing cycles. """,
    tags=['billing_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_billing_cycles():
    """
    Get all the previous 12 billing cycles.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/callbacks',
    description=""" Get list of callback types with count for a requested Date. """,
    tags=['case_operations', 'case_analytics', 'case_updates_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_callbacks(date: Optional[datetime] = None, status: Optional[Status6] = None):
    """
    Get list of callback types with count for a requested Date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}',
    description=""" Retrieve the case with the specified caseId value. """,
    tags=['case_operations', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case(case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId')):
    """
    Gets case information for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/attorneys',
    description=""" Retrieve the attorneys in the case with the specified caseId value. """,
    tags=['attorney_operations', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_attorneys(
    is_visible: Optional[bool] = Query(None, alias='isVisible'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Attorneys for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/docketEntries',
    description=""" Retrieve the docket entries in the case with the specified caseId value. """,
    tags=['case_operations', 'case_document_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_docket_entries(
    docket_number: Optional[int] = Query(None, alias='docketNumber'),
    sort_by: Optional[SortBy] = Query(None, alias='sortBy'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Docket Entries for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/docketEntries/primaryDocuments',
    description=""" Retrieve the primary documents in the case with the specified caseId value. """,
    tags=['case_operations', 'case_document_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_primary_documents_for_docket_entries(
    docket_number: int = Query(..., alias='docketNumber'),
    in_library: Optional[bool] = Query(None, alias='inLibrary'),
    after_first_fetch_date: Optional[datetime] = Query(
        None, alias='afterFirstFetchDate'
    ),
    library_date: Optional[datetime] = Query(None, alias='libraryDate'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Primary Documents of Docket Entries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/docketEntries/secondaryDocuments',
    description=""" Retrieve the secondary documents in the case with the specified caseId value. """,
    tags=['case_operations', 'case_document_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_secondary_documents_for_docket_entries(
    docket_number: int = Query(..., alias='docketNumber'),
    in_library: Optional[bool] = Query(None, alias='inLibrary'),
    after_first_fetch_date: Optional[datetime] = Query(
        None, alias='afterFirstFetchDate'
    ),
    library_date: Optional[datetime] = Query(None, alias='libraryDate'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Secondary Documents of Docket Entries.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/documents',
    description=""" Gets Documents for a requested Case ID. """,
    tags=['case_operations', 'case_document_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_documents(
    in_library: Optional[bool] = Query(None, alias='inLibrary'),
    after_first_fetch_date: Optional[datetime] = Query(
        None, alias='afterFirstFetchDate'
    ),
    library_date: Optional[datetime] = Query(None, alias='libraryDate'),
    first_fetch_date: Optional[datetime] = Query(None, alias='firstFetchDate'),
    sort_by: Optional[SortBy] = Query(None, alias='sortBy'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Documents for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/hearings',
    description=""" Gets Hearings for a requested Case ID. """,
    tags=['case_operations', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_hearings(
    sort_by: Optional[SortBy] = Query(None, alias='sortBy'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Hearings for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/judges',
    description=""" Retrieve the judges involved in the specified case. """,
    tags=['judge_operations', 'case_operations', 'judge_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_judges(
    is_visible: Optional[bool] = Query(None, alias='isVisible'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Judges for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/parties',
    description=""" Retrieve the parties involved in the case with the specified caseId value. """,
    tags=[
        'party_information_retrieval',
        'case_operations',
        'party_role_management',
        'attorney_operations',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_parties(
    is_visible: Optional[bool] = Query(None, alias='isVisible'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    party_role_id: Optional[constr(min_length=18, max_length=18)] = Query(
        None, alias='partyRoleId'
    ),
    party_role_group_id: Optional[constr(min_length=18, max_length=18)] = Query(
        None, alias='partyRoleGroupId'
    ),
    attorney_representation_type_id: Optional[
        constr(min_length=18, max_length=18)
    ] = Query(None, alias='attorneyRepresentationTypeId'),
    party_classification_type: Optional[PartyClassificationType1] = Query(
        None, alias='partyClassificationType'
    ),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Parties for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/case/{caseId}/relatedCases',
    description=""" Retrieve cases that UniCourt has identified as related to the case with the specified caseId value. """,
    tags=['case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_related_cases(
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId'),
):
    """
    Gets Related Cases for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByAreaOfLaw',
    description=""" Get Case Count Analytics by Area Of Law.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by Area Of Law of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_area_of_law(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Area Of Law.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCaseClass',
    description=""" Get Analytics by Case Class.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by Case Class  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_operations', 'case_analytics'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_case_class(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Case Class.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCaseFiledDate',
    description=""" Get Case Count Analytics grouped by Filing Date.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by case filed date of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_case_filed_date(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    group_by: GroupBy = Query(..., alias='groupBy'),
):
    """
    Case Count Analytics by Case Filed Date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCaseType',
    description=""" Get Case Count Analytics by Case Type.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by case types  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_case_type(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Case Type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCaseTypeGroup',
    description=""" Get Analytics by Case Type Group.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by case type catgeory of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_operations', 'case_analytics'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_case_type_group(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Case Type Group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCourt',
    description=""" Get Case Count Analytics grouped by Court.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by Court of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_court(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Court.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCourtLocation',
    description=""" Get Case Count Analytics grouped by Court Location.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by court location  of all cases with court id CORTV4vCEaKrhystBz and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=courtId:"CORTV4vCEaKrhystBz" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'court_information', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_court_location(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Court Location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCourtSystem',
    description=""" Get Case Count Analytics grouped by Court System.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by court system of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_court_system(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Court System.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByCourtType',
    description=""" Get Case Count Analytics grouped by Court Type.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by court type  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_court_type(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by CourtType.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByJurisdictionGeo',
    description=""" Get Case Count Analytics grouped by Jurisdiction Geo.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by jurisdiction geo of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'jurisdiction_geo_data'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_jurisdiction_geo(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Jurisdiction Geo.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByNormAttorney',
    description=""" Returns Case Analytics by Attorney.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by norm attorney of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations', 'attorney_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_norm_attorney(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Attorney.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByNormJudge',
    description=""" Returns Case Analytics by Judge.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **normAttorneyId** | Multiple Ids Allowed |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by norm judge of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'judge_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_norm_judge(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Judge.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByNormLawFirm',
    description=""" Returns Case Analytics by Norm Law Firm.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by norm lawfirm  of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_norm_law_firm(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Norm Law Firm.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByNormParty',
    description=""" Returns Case Analytics by Party.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Multiple Ids Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normLawFirmId** | Multiple Ids Allowed  |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normPartyId** | Multiple Ids Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Multiple Ids Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by norm party of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_norm_party(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Party.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByPartyRole',
    description=""" Returns Case Analytics by Party Type.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by party role of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'party_role_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_party_role(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Party Role.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseCountAnalyticsByPartyRoleGroup',
    description=""" Returns Case Analytics by Party Type Group.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normPartyId** | Multiple Ids Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by Party Role Group of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'party_role_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_party_role_group(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
):
    """
    Case Count Analytics by Party Role Group.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseDocument/{caseDocumentId}',
    description=""" Gets details for a requested Document ID. """,
    tags=['case_operations', 'case_document_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_document_by_id(
    case_document_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseDocumentId'
    )
):
    """
    Gets details for a requested Document ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseDocumentDownload/{caseDocumentId}',
    description=""" Gets downloadable URL for a requested Document ID. """,
    tags=['case_document_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_document_download_by_id(
    is_preview_document: Optional[bool] = Query(False, alias='isPreviewDocument'),
    case_document_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseDocumentId'
    ),
):
    """
    Gets downloadable URL for a requested Document ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/caseDocumentOrder',
    description=""" Add Case Document Order for requested Document Ids. """,
    tags=['case_operations', 'case_document_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def order_case_document(body: CaseDocumentOrderRequest = None):
    """
    Add Case Document Order for requested Document Ids.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseDocumentOrder/callbacks',
    description=""" Get Case Document Order Callback list for a requested Date. """,
    tags=['case_document_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_document_order_callbacks(
    date: Optional[datetime] = None,
    status: Optional[Status6] = None,
    page_number: Optional[conint(ge=1)] = Query(1, alias='pageNumber'),
):
    """
    Get Case Document Order Callback list for a requested Date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseDocumentOrder/callbacks/{caseDocumentOrderCallbackId}',
    description=""" Get Case Document Order Callback for a requested Case Document Order Callback Id. """,
    tags=['case_operations', 'case_document_management', 'case_export_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_document_order_callback_by_id(
    case_document_order_callback_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseDocumentOrderCallbackId'
    )
):
    """
    Get Case Document Order Callback for a requested Case Document Order Callback Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseExport/callbacks',
    description=""" Retrieve callbacks according to the specified criteria. """,
    tags=['case_export_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_export_callbacks(
    date: Optional[datetime] = None,
    status: Optional[Status6] = None,
    page_number: Optional[conint(ge=1)] = Query(1, alias='pageNumber'),
):
    """
    Get Case Export Callback list for a requested Date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseExport/callbacks/{caseExportCallbackId}',
    description=""" Retrieve the specified case export callback object. """,
    tags=['case_export_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_export_callback_by_id(
    case_export_callback_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseExportCallbackId'
    )
):
    """
    Get Case Export Callback for a requested Case Export Callback Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/caseExport/{caseId}',
    description=""" Retrieve information about the specified case export. """,
    tags=['case_operations', 'case_export_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def export_case(
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId')
):
    """
    Gets case exported for a requested Case ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseSearch',
    description=""" This endpoint retrieves cases according to keyword expressions you provide.
<br>
Keyword expressions are constructed according to the rules described below.
<br><br>
This API supports multiple use cases:
  - Search for multiple keywords  `Google OR Facebook`.
  - Search within particular attributes.
  - Relational search using terms and connectors.
  - And much more.
----

## Allowed Connectors in Keyword Expressions
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find cases containing each of the terms joined by AND connectors.|**personal AND injury**|
| **OR**  |Find cases containing any of the terms joined by OR connectors.|**order OR decision**|
| **NOT** |Find cases that do not contain the specified term.|**personal AND NOT injury**.  Find cases with the word “personal” and not “injury”.|
| **“[phrase]”** |Find the exact phrase placed between the quotation marks.|**"personal injury”**|
| **~**  |Find cases in which the specified words appear near each other. For example, "personal injury" ~ 5 targets cases in which the word "personal" appears within 5 words of the word "injury".|**“personal injury” ~ 5** - Find cases with “personal” within five words of “injury”. |
| **( … )** |Specifies the order in which connectors are to be appliied in a keyword expression.| **personal AND (injury OR fall)** - Find cases with the word personal injury or personal fall.|

<br><br>
## Fields and Connectors Searching
| Filed | Description  | Example |
| ------| ------|------|
|**caseNumber** |Find cases with the specified case number (i.e., docket number).| **caseNumber:"2020-L-007212"** - Find cases whose case number matches given case number number.|
|**caseName** |Find cases with the specified case title.| **caseName:"THOMAS P. CARNEY, INC. VS BEHLER JAMES Et Al"** - Find cases whose case name matches given terms.|
|**Court**|Find cases in the specified court.|**(Court:(name:(New York)))** - Find cases in New York state.<br>|
|**CaseStatus**|Find cases witih the specified case status.|**(CaseStatus:(name:Disposed))** - All disposed cases.<br>|
|**CaseType**|Find cases of the specified case type. | **(CaseType:(name:Property))** - Cases with case type “property”.|
|**Party** | Find cases involving the specified party.| **(Party:(name:Apple))** - Find cases involving Apple. |
|**partyId**|Find cases involving a party with the specified partyId value.|**(Party:(partyId:"PRTYgu1ffe866484c2"))**|
|**PartyRole** | Find cases in which at least one party has the specified party role. | **(Party:((PartyRole:(name:"plaintiff"))))** - Find cases with party role “plaintiff”.<br><br> **(Party:((PartyRole:(name:defendant)) AND (AttorneyRepresentationType:(name:(Attorney represented)))))** - Find cases where a party is acting as defendant and represented by an attorney.|
|**AttorneyRepresentationType**| Find cases in which at least one party has the specified attorney representation type.|**(Party:(AttorneyRepresentationType:(name:"attorney represented")))** - Find cases where a party is represented by an attorney. |
|**Attorney** | Find cases involving the specified attorney. | **(Attorney:(name:"David Boies"))** - Find cases involving the attorney David Boies. |
|**AttorneyType**|Find cases involving at least one attorney of the specified attorney type.|**(Attorney:((AttorneyType:(name:"Lead Attorney"))))**|
|**Judge** |Find cases involving the specified judge. | **(Judge:(name:"Posner"))** - Find cases involving Judge Posner.|
|**JudgeType**|Find cases involving at least one judge of the specified judge type.|**(Judge:((JudgeType:(name:"Magistrate"))))**|
|**CaseStats**|Find cases with the specified case statistics.|**(CaseStats:(partyCount:[10 TO 100]))** - Find cases involving 10 to 100 parties.<br>**(CaseStats:(attorneyCount:[2 TO 40]))** - Find cases involving 2 to 40 attorneys.<br>**(CaseStats:(judgeCount:[\* TO 2]))** - Find cases involving up to 2 judges. <br>**(CaseStats:(docketEntryCount:[10 TO 100]))** - Find cases having 10 to 100 docket_entries. <br>**(CaseStats:(allCaseDocumentCount:[10 TO 100]))** - Find cases having 10 to 100 documents. |
|**filedDate** | Find cases that were filed on the specified date or within the specified date range. | **filedDate:[2020-03-15 TO 2021-12-01]** - Find the most recently filed cases between March 15, 2020 and December 1, 2021 (inclusive). |
|**lastFetchDate**| Find cases in which UniCourt last checked for updates on the specified date or within the specified date range. |**(lastFetchDate:[now-60d TO \*\])** - Find cases that were updated by UniCourt in the last 60 days. |
|**lastFetchDateWithUpdates**|Find cases in which UniCourt last detected an update on the specified date or within the specified date range.|**(lastFetchDateWithUpdates:[now-6d TO \*\])** - Find cases for the changes found on court site in last 6 days.|
|**participantsLastFetchDate**|Find cases in which information cocnerning participants was last updated on the specified date or within the specified date range.|**(participantsLastFetchDate:[now-6d TO \*\])** - Find cases where the participant's information was updated in last 6 days.|
|**DocketEntry**|Find cases in which at least one docket entry contains the specified text.|**(DocketEntry:(text:(Motion to Compel Responses) AND docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00]))** - Find cases with docket text “Motion to Compel Responses” and action date between 2020-01-01 and 2020-05-01.|
|**docketEntryDate**|Find cases in which at least one docket entry was made on the specified date or within the specified date range.|**(DocketEntry:(docketEntryDate:[2020-01-01T00:00:00 TO 2020-05-01T00:00:00])) AND (CaseStats:(allCaseDocumentCount:[0 TO 10]))** - Find cases with docket action date between 2020-01-01 and 2020-05-01 having up to 10 documents associated with it.|
|**HearingDate**| Find cases with at least one hearing scheduled for the specified date or within the specified date range.|**(Hearing:(hearingDate:[now TO now+10d]))** - Find cases where hearing is scheduled in next 10 days.|
|**HearingDate**| Search for cases where hearing is going to happen in 10 to 20days.|**(Hearing:(hearingDate:[now+10d TO now+20d]))** - Find cases where hearing is scheduled in next 10 to 20 days.|
|**JurisdictionGeo**|Find cases in which the law of the specified state governs.|**(JurisdictionGeo:(state:"New York"))**- Find cases where Jurisdiction is New York state.|
|**Party Address Exists**|Find cases with Party addresses.|**(Party:(Contact:(Address:(stateName:\*))))**- Returns only those cases that have addresses for parties.|
|**Document**|Find cases with specific document name and preview is available for the document.|**(CaseDocument:(name:"civil case cover sheet" AND isPreviewAvailable:true))**- Returns cases with document civil case cover sheet and preview is available.|

<br><br>
---
## Party Sub Filter Examples
|Example |Explanation |
|---|---|
|**(Party:(name:google AND (PartyRole:(name:"plaintiff"))))**|Find cases involving at least one plaintiff whose name contains the term "Google".|
|**(Party:(name:"OTELIA PEREIDA" AND (AttorneyRepresentationType:(name:"Attorney represented")))) AND (Attorney:(name:"Law Offices of Todd M Friedman"))**|Find cases where the Party is *OTELIA PEREIDA* and is represented by the attorney *Law Offices of Todd M Friedman*.|

---
### All query parameters supported for this API can be found in below schema section. Schema -->  CaseSearchQueryObject
 """,
    tags=['case_operations', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_cases(
    q: constr(min_length=3, max_length=2000),
    sort: Optional[Sort] = 'filedDate',
    order: Optional[Order] = 'desc',
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
):
    """
    Case search.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseSearch/{caseSearchId}',
    description=""" Retrieve the search results corresponding to the specified caseSearchId value.
 """,
    tags=['case_operations', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_cases_by_id(
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
    case_search_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseSearchId'
    ),
):
    """
    Case search results for a given caseSearchId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/caseTrack',
    description=""" Track the specified case. """,
    tags=['case_tracking_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def track_case(body: CaseTrackRequest = None):
    """
    Add Case Track for the requested Case Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/caseTrack/{caseId}',
    description=""" Remove Case Track for a specific Case Id. """,
    tags=['case_tracking_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def remove_case_track_by_id(
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId')
):
    """
    Remove Case Track for a specific Case Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseTrack/{caseId}',
    description=""" Retrieve case tracking information for the specified caseId value. """,
    tags=['case_operations', 'case_tracking_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_track_by_id(
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId')
):
    """
    Get Case Track for a requested Case Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseTracks',
    description=""" Retrieve a list of all tracked cases. """,
    tags=['case_operations', 'case_tracking_management', 'case_updates_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_tracks(
    last_fetch_date: Optional[datetime] = Query(None, alias='lastFetchDate'),
    last_fetch_date_with_updates: Optional[datetime] = Query(
        None, alias='lastFetchDateWithUpdates'
    ),
    page_number: Optional[conint(ge=1)] = Query(None, alias='pageNumber'),
):
    """
    Get Case Track list.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/caseUpdate',
    description=""" Request case updates for the specified case. """,
    tags=['case_updates_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def update_case(body: CaseUpdateRequest = None):
    """
    Add Case Update for the requested Case Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseUpdate/{caseId}',
    description=""" Retrieve case updates for the specified case object. """,
    tags=['case_updates_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_update_by_case_id(
    case_id: constr(min_length=18, max_length=18) = Path(..., alias='caseId')
):
    """
    Get Case Updates for a requested CaseId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/caseUpdates',
    description=""" Retrieve case updates for the specified date. """,
    tags=['case_updates_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_updates(
    case_id: Optional[constr(min_length=18, max_length=18)] = Query(
        None, alias='caseId'
    ),
    requested_date: Optional[datetime] = Query(None, alias='requestedDate'),
    status: Optional[Status6] = None,
    page_number: Optional[conint(ge=1)] = Query(1, alias='pageNumber'),
):
    """
    Get Case Update  list for a requested Date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/courtCoverage/{courtId}',
    description=""" Gets Court Coverage of all courts. """,
    tags=['court_management', 'court_operations', 'court_information'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_coverage(
    court_id: constr(min_length=18, max_length=18) = Path(..., alias='courtId')
):
    """
    Gets Court Coverage of all courts of specific type.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/dailyUsage/{date}',
    description=""" An endpoint to obtain information on API usage for a specific day. """,
    tags=['api_usage_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_daily_usage_by_date(date: date_aliased):
    """
    Get API usage for a requested Date.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.post(
    '/generateNewToken',
    description=""" This endpoint allows you to generate a new access token, which is a required field for all UniCourt API endpoints except for the Authentication API. To generate a new token, you must provide your Client ID and Client Secret ID which you can find by logging into your UniCourt account. At any time, you can have a maximum of 10 active access tokens. The tokens never expire and, if you make a request which would otherwise lead to you having more than 10 active tokens, you will receive an error message. """,
    tags=['api_usage_management'],
)
def generate_new_token(body: AccessTokenRequest = None):
    """
    Generate new token to access API.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/invalidateAllTokens',
    description=""" An endpoint which allows you to invalidate all existing access tokens associated with your UniCourt account. """,
    tags=['api_usage_management'],
)
def invalidate_all_tokens(body: AccessTokenRequest = None):
    """
    API to invalidate all access tokens.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/invalidateToken',
    description=""" An endpoint which allows you to invalidate a given access token. """,
    tags=['api_usage_management'],
)
def invalidate_token(body: InvalidateAccessTokenRequest = None):
    """
    API to invalidate the access token.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/judge/{judgeId}',
    description=""" Retrieve the judge with the specified judgeId value. """,
    tags=['judge_operations', 'court_management', 'judge_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_judge_by_id(
    judge_id: constr(min_length=18, max_length=18) = Path(..., alias='judgeId')
):
    """
    Gets details for a requested Judge ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/listAllTokenIds',
    description=""" An endpoint which allows you to view all active access tokens associated with your Client ID and Client Secret ID. """,
    tags=['api_usage_management'],
)
def list_all_token_ids(body: AccessTokenRequest = None):
    """
    API to list all the access tokens Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/areaOfLaw',
    description=""" Returns AreaOfLaw Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> AreaOfLawQueryObject
 """,
    tags=['law_area_management', 'case_analytics'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_areas_of_law(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    AreaOfLaw Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/areaOfLaw/{areaOfLawId}',
    description=""" AreaOfLaw Object for the given AreaOfLaw Id.
 """,
    tags=['law_area_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_area_of_law(
    area_of_law_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='areaOfLawId'
    )
):
    """
    AreaOfLaw Object for the given AreaOfLaw Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/attorneyRepresentationType',
    description=""" Returns Attorney Representation Type Objects.
## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyRepresentationTypeQueryObject
 """,
    tags=['attorney_representation_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_attorney_representation_types(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Attorney Representation Type Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/attorneyRepresentationType/{attorneyRepresentationTypeId}',
    description=""" Returns Attorney Representation Type Object for the given attorneyRepresentationTypeId.
 """,
    tags=['attorney_representation_management', 'attorney_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_attorney_representation_type(
    attorney_representation_type_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='attorneyRepresentationTypeId'
    )
):
    """
    Attorney Representation Type Object for the given attorneyRepresentationTypeId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/attorneyType',
    description=""" Returns Attorney Type Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> AttorneyTypeQueryObject
 """,
    tags=[
        'attorney_operations',
        'attorney_type_management',
        'attorney_representation_management',
        'attorney_search_operations',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_attorney_types(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Attorney Type Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/attorneyType/{attorneyTypeId}',
    description=""" Attorney Type Object for given Attorney Type Id.
 """,
    tags=['attorney_type_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_attorney_type(
    attorney_type_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='attorneyTypeId'
    )
):
    """
    Attorney Type Object for given Attorney Type Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseClass',
    description=""" Returns Case Class information.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseClassQueryObject
 """,
    tags=['case_class_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_cases_class(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Case Class Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseClass/{caseClassId}',
    description=""" Case Class for the given Case Class Id.
 """,
    tags=['case_class_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_class(
    case_class_id: constr(min_length=18, max_length=18) = Path(..., alias='caseClassId')
):
    """
    Case Class Object for the given Case Class Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseRelationshipType',
    description=""" Returns Case Relationship Type Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseRelationshipTypeQueryObject
 """,
    tags=['case_class_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_relationship_types(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Case Relationship Type Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseRelationshipType/{caseRelationshipTypeId}',
    description=""" Case Relationship Type Object for the given caseRelationshipTypeId.
 """,
    tags=['case_operations', 'case_class_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_relationship_type(
    case_relationship_type_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseRelationshipTypeId'
    )
):
    """
    Case Relationship Type Object for the given caseRelationshipTypeId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseStatus',
    description=""" Returns Case Status Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below Schema section. Schema --> CaseStatusQueryObject
 """,
    tags=['case_operations', 'case_updates_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_cases_status(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Case Status Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseStatus/{caseStatusId}',
    description=""" Case Status Object for given Case Status Id.
 """,
    tags=['case_operations', 'case_updates_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_status(
    case_status_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseStatusId'
    )
):
    """
    Returns the caseStatus information for the given caseStatusId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseStatusGroup',
    description=""" Returns Case Status Group Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseStatusGroupQueryObject
 """,
    tags=['case_operations', 'case_updates_management', 'case_analysis_functions'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_status_groups(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Case Status Group Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseStatusGroup/{caseStatusGroupId}',
    description=""" CaseStatusGroup information for the given Id.
 """,
    tags=['case_operations', 'case_updates_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_status_group(
    case_status_group_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseStatusGroupId'
    )
):
    """
    Returns the caseStatusGroup information for the given caseStatusGroupId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseType',
    description=""" Returns Case Type information.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeQueryObject
 """,
    tags=['case_operations', 'case_updates_management', 'case_class_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_types(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Case Type Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseType/{caseTypeId}',
    description=""" CaseType Object for the given Case Type Id.
 """,
    tags=['case_operations', 'case_updates_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_type(
    case_type_id: constr(min_length=18, max_length=18) = Path(..., alias='caseTypeId')
):
    """
    CaseType Object for given Case Type Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseTypeGroup',
    description=""" Returns CaseTypeGroup Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CaseTypeGroupQueryObject
 """,
    tags=['case_operations', 'case_analytics'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_type_groups(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    CaseTypeGroup Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/caseTypeGroup/{caseTypeGroupId}',
    description=""" Returns CaseType Group for the given CaseType Group Id.
 """,
    tags=['case_operations', 'case_class_management', 'case_updates_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_type_group(
    case_type_group_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='caseTypeGroupId'
    )
):
    """
    CaseType Group for the given CaseType Group Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/causeOfAction',
    description=""" Returns CauseOfAction Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionQueryObject
 """,
    tags=['cause_of_action_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_causes_of_action(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    CauseOfAction Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/causeOfAction/{causeOfActionId}',
    description=""" CauseOfAction Object for the given causeOfActionId.
 """,
    tags=['cause_of_action_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_cause_of_action(
    cause_of_action_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='causeOfActionId'
    )
):
    """
    CauseOfAction Object for the given causeOfActionId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/causeOfActionAdditionalData',
    description=""" Returns CauseOfActionAdditionaData Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionAdditionalDataQueryObject
 """,
    tags=['cause_of_action_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_causes_of_action_additional_data(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    CauseOfActionAdditionaData Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/causeOfActionAdditionalData/{causeOfActionAdditionalDataId}',
    description=""" CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
 """,
    tags=['cause_of_action_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_cause_of_action_additional_data(
    cause_of_action_additional_data_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='causeOfActionAdditionalDataId'
    )
):
    """
    CauseOfActionAdditionalData Object for the given causeOfActionAdditionalDataId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/causeOfActionGroup',
    description=""" Returns CauseOfActionGroup Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CauseOfActionGroupQueryObject
 """,
    tags=['cause_of_action_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_causes_of_action_group(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    CauseOfActionGroup Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/causeOfActionGroup/{causeOfActionGroupId}',
    description=""" CauseOfActionGroup Object for the given causeOfActionGroupId.
 """,
    tags=['cause_of_action_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_cause_of_action_group(
    cause_of_action_group_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='causeOfActionGroupId'
    )
):
    """
    CauseOfActionGroup Object for the given causeOfActionGroupId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/charge',
    description=""" Returns Charge Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeQueryObject
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charges(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Charge Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/charge/{chargeId}',
    description=""" Charge Object for the given chargeId.
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charge(
    charge_id: constr(min_length=18, max_length=18) = Path(..., alias='chargeId')
):
    """
    Charge Object for the given chargeId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeAdditionalData',
    description=""" Returns ChargeAdditionalData Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeAdditionalDataQueryObject
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charges_additional_data(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Charge Additional Data Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeAdditionalData/{chargeAdditionalDataId}',
    description=""" Charge Additional Data Object for the given chargeAdditionalDataId.
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charge_additional_data(
    charge_additional_data_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='chargeAdditionalDataId'
    )
):
    """
    Charge Additional Data Object for the given chargeAdditionalDataId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeDegree',
    description=""" Returns ChargeDegree Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeDegreeQueryObject
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charges_degree(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    ChargeDegree Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeDegree/{chargeDegreeId}',
    description=""" ChargeDegree Object for the given chargeDegreeId.
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charge_degree(
    charge_degree_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='chargeDegreeId'
    )
):
    """
    ChargeDegree Object for the given chargeDegreeId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeGroup',
    description=""" Returns Charge Group Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeGroupQueryObject
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charge_groups(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Charge Group Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeGroup/{chargeGroupId}',
    description=""" Charge Group Object for the given chargeGroupId.
 """,
    tags=['charge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charge_group(
    charge_group_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='chargeGroupId'
    )
):
    """
    Charge Group Object for the given chargeGroupId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeSeverity',
    description=""" Returns ChargeSeverity Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> ChargeSeverityQueryObject
 """,
    tags=['charge_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charges_severity(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    ChargeSeverity Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/chargeSeverity/{chargeSeverityId}',
    description=""" ChargeSeverity Object for the given chargeSeverityId.
 """,
    tags=['charge_management', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_charge_severity(
    charge_severity_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='chargeSeverityId'
    )
):
    """
    ChargeSeverity Object for the given chargeSeverityId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/court',
    description=""" Returns the court information.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
        | **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtQueryObject
 """,
    tags=['court_information', 'court_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_courts(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Court Objects.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/court/{courtId}',
    description=""" Returns court information for given courtId.
 """,
    tags=['court_information', 'court_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court(
    court_id: constr(min_length=18, max_length=18) = Path(..., alias='courtId')
):
    """
    Court Object for given courtId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/court/{courtId}/appealCourts',
    description=""" Returns Appeal Court Objects for given courtId.
 """,
    tags=['court_information', 'court_operations', 'court_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_appeal_courts_for_court(
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
    court_id: constr(min_length=18, max_length=18) = Path(..., alias='courtId'),
):
    """
    Appeal Court Objects for given courtId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/court/{courtId}/courtLocations',
    description=""" Contains the Court Location Object for given courtId.
 """,
    tags=['court_information', 'court_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_locations_for_court(
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort2] = 'name',
    order: Optional[Order] = 'asc',
    court_id: constr(min_length=18, max_length=18) = Path(..., alias='courtId'),
):
    """
    Associated Court Location for given courtId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/court/{courtId}/jurisdictionGeo',
    description=""" Returns Jurisdiction Geo Objects for given courtId.
 """,
    tags=['court_information', 'jurisdiction_geo_data', 'court_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_jurisdiction_geo_for_court(
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort42] = 'state',
    order: Optional[Order] = 'asc',
    court_id: constr(min_length=18, max_length=18) = Path(..., alias='courtId'),
):
    """
    Jurisdiction Geo Objects for given courtId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtLocation',
    description=""" Returns the Courthouse Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtLocationQueryObject
 """,
    tags=['court_information', 'court_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_locations(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort44] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Courthouse Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtLocation/{courtLocationId}',
    description=""" Contains the Court Location Object.
 """,
    tags=['court_information', 'court_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_location(
    court_location_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='courtLocationId'
    )
):
    """
    Courthouse Object for given Court Location Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtLocation/{courtLocationId}/courts',
    description=""" Returns Associated Court for given Court Location.
 """,
    tags=['court_information', 'court_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_courts_for_court_location(
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort44] = 'name',
    order: Optional[Order] = 'asc',
    court_location_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='courtLocationId'
    ),
):
    """
    Associated Court for given Court Location.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtServiceStatus',
    description=""" Returns Court Service Status Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtServiceStatusQueryObject
 """,
    tags=['court_service_status_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_courts_service_status(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort44] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Court Service Status Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtServiceStatus/{courtServiceStatusId}',
    description=""" Court Service Status Object for the given courtServiceStatusId.
 """,
    tags=['court_service_status_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_service_status(
    court_service_status_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='courtServiceStatusId'
    )
):
    """
    Court Service Status Object for the given courtServiceStatusId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtSystem',
    description=""" Returns the Court System Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
        | **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtSystemQueryObject
 """,
    tags=['court_management', 'court_operations', 'court_information'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_systems(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort44] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Court System Objects.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtSystem/{courtSystemId}',
    description=""" Contains the Court System object.
 """,
    tags=['court_information', 'court_management', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_system(
    court_system_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='courtSystemId'
    )
):
    """
    Court System Object for given courtSystemId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtType',
    description=""" Returns the Court Type Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
        | **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> CourtTypeQueryObject
 """,
    tags=['court_information', 'court_operations', 'court_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_types(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort44] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Court Type Objects.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/courtType/{courtTypeId}',
    description=""" Contains the Court Type Object.
 """,
    tags=['court_information', 'court_operations', 'court_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_court_type(
    court_type_id: constr(min_length=18, max_length=18) = Path(..., alias='courtTypeId')
):
    """
    Court Type Object for given courtTypeId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/judgeType',
    description=""" Returns Judge Type Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JudgeTypeQueryObject
 """,
    tags=['judge_operations', 'judge_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_judge_types(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort44] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Judge Type Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/judgeType/{judgeTypeId}',
    description=""" Judge Type Object for the given judgeTypeId.
 """,
    tags=['judge_operations', 'judge_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_judge_type(
    judge_type_id: constr(min_length=18, max_length=18) = Path(..., alias='judgeTypeId')
):
    """
    Judge Type Object for the given judgeTypeId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/jurisdictionGeo',
    description=""" Returns the Jurisdiction Geo Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> JurisdictionGeoQueryObject
 """,
    tags=['jurisdiction_geo_data'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_jurisdictions_geo(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort56] = 'state',
    order: Optional[Order] = 'asc',
):
    """
    Jurisdiction Geo Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/jurisdictionGeo/{jurisdictionGeoId}',
    description=""" Returns the Jurisdiction Geo Object for given Jurisdiction Geo Id.
 """,
    tags=['jurisdiction_geo_data', 'court_information'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_jurisdiction_geo(
    jurisdiction_geo_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='jurisdictionGeoId'
    )
):
    """
    Jurisdiction Geo Object for given Jurisdiction Geo Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/jurisdictionGeo/{jurisdictionGeoId}/courts',
    description=""" Returns Associated Court for given Jurisdiction Geo.
 """,
    tags=['court_information', 'jurisdiction_geo_data', 'court_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_courts_for_jurisdiction_geo(
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort58] = 'name',
    order: Optional[Order] = 'asc',
    jurisdiction_geo_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='jurisdictionGeoId'
    ),
):
    """
    Associated Court for given Jurisdiction Geo.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/partyRole',
    description=""" Returns Party Role Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleQueryObject
 """,
    tags=['party_role_management', 'party_information_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_party_roles(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort58] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Party Role Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/partyRole/{partyRoleId}',
    description=""" Returns Party Role Object for given Party Role Id.
 """,
    tags=['party_role_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_party_role(
    party_role_id: constr(min_length=18, max_length=18) = Path(..., alias='partyRoleId')
):
    """
    Party Role Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/partyRoleGroup',
    description=""" Returns Party Role Group Object.

## Logical Operators
| Connector | Description  | Example |
| ------| ------|------|
| **AND** |Find data containing all connected terms.|**google AND facebook**|
| **OR**  |Find data containing any connected term.| **order OR decision**|
| **NOT** |Exclude data.| **google NOT apple**.|
| **“[phrase]”** |Find an exact phrase.| **"Google Inc”** |
| **( … )** |Parenthesis may be used to group sets of terms of connectors.| **google (facebook OR apple)**.|

### All Filter Query parameters supported for this API can be found in below schema section. Schema --> PartyRoleGroupQueryObject
 """,
    tags=['party_role_management', 'party_information_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_party_role_groups(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=100)] = Query(None, alias='pageNumber'),
    sort: Optional[Sort58] = 'name',
    order: Optional[Order] = 'asc',
):
    """
    Party Role Group Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/masterData/partyRoleGroup/{partyRoleGroupId}',
    description=""" Returns Party Role Group Object for given Party Role Group Id.
 """,
    tags=['party_role_management', 'party_information_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_party_role_group(
    party_role_group_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='partyRoleGroupId'
    )
):
    """
    Party Role Group Object.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normAttorney/{normAttorneyId}',
    description=""" The Norm Attorney API allows you to look up Attorney Details by normAttorneyId. """,
    tags=[
        'attorney_operations',
        'normalized_attorney_management',
        'attorney_representation_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_attorney_by_id(
    norm_attorney_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normAttorneyId'
    )
):
    """
    Norm Attorney Details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normAttorney/{normAttorneyId}/associatedNormJudges',
    description=""" Returns a list of Judges faced by the Attorney.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all judges associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'judge_operations',
        'judge_association_management',
        'normalized_attorney_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_judges_associated_with_norm_attorney(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_attorney_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normAttorneyId'
    ),
):
    """
    Judges faced by the Attorney.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normAttorney/{normAttorneyId}/associatedNormLawFirms',
    description=""" Returns a list of Law Firms the norm Attorney has worked for.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all LawFirms associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'attorney_operations',
        'law_firm_association_functions',
        'normalized_attorney_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_law_firms_associated_with_norm_attorney(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_attorney_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normAttorneyId'
    ),
):
    """
    Law Firms the attorney has worked for.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normAttorney/{normAttorneyId}/associatedNormParties',
    description=""" Returns a list of Parties the Attorney has represented.
<br><br>
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz"  AND  courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTV4vCEaKrhystBz", "CORTKQiA4LJuv54tEj")**|
| **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object.. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all parties associated with attorney with norm id NATYfwmXwRHS279WPY of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'attorney_operations',
        'party_information_retrieval',
        'attorney_representation_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_parties_associated_with_norm_attorney(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_attorney_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normAttorneyId'
    ),
):
    """
    Parties Represented By the Attorney.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normAttorney/{normAttorneyId}/caseCountAnalyticsByOpposingNormAttorney',
    description=""" Returns Case Analytics by Attorney.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normPartyId** | Single Allowed  |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Single Allowed |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by norm attorney with norm id NATYY29p78c7UoyJJ of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_by_opposing_norm_attorney(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_attorney_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normAttorneyId'
    ),
):
    """
    Case Count Analytics by Opposing Norm Attorney.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normAttorneySearch',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormAttorneySearchQueryObject
 """,
    tags=['attorney_search_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_attorneys(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
):
    """
    Attorney search.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normAttorneySearch/{normAttorneySearchId}',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormAttorneySearchQueryObject
 """,
    tags=['attorney_search_operations', 'normalized_attorney_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_attorneys_by_id(
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
    norm_attorney_search_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normAttorneySearchId'
    ),
):
    """
    Norm attorney search results for a given normAttorneySearchId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normJudge/{normJudgeId}',
    description=""" The Judge API allows you to look up Judge Details by normJudgeId.
 """,
    tags=['judge_operations', 'norm_judge_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_judge_by_id(
    norm_judge_id: constr(min_length=18, max_length=18) = Path(..., alias='normJudgeId')
):
    """
    Norm Judge Details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normJudge/{normJudgeId}/associatedNormAttorneys',
    description=""" Returns a list of attorneys associated with a judge.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLOOY8WTHDBLL0eWv","COLOItKA5pBVovpQSZ")**|
| **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all attorneys associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'judge_association_management',
        'attorney_operations',
        'normalized_attorney_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_attorneys_associated_with_norm_judge(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_judge_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normJudgeId'
    ),
):
    """
    Attorneys Associated with the Judge.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normJudge/{normJudgeId}/associatedNormLawFirms',
    description=""" Returns a list of Law Firms a Judge has heard.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLOOY8WTHDBLL0eWv","COLOItKA5pBVovpQSZ")**|
| **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all Law Firms associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=['judge_association_management', 'law_firm_association_functions'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_law_firms_associated_with_norm_judge(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_judge_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normJudgeId'
    ),
):
    """
    Law Firms Associated With the Judge.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normJudge/{normJudgeId}/associatedNormParties',
    description=""" Returns a list of Parties A Judge has seen.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtLocationId IN ("COLOOY8WTHDBLL0eWv","COLOItKA5pBVovpQSZ")**|
| **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all Parties associated with judge with norm id NJUDT7jCZyFNeLGpRq of all cases with case type id CTYPATMYyaJekdgj2c and case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'judge_operations',
        'judge_association_management',
        'party_association_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_parties_associated_with_norm_judge(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_judge_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normJudgeId'
    ),
):
    """
    Parties Associated with the Judge.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normJudgeSearch',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormJudgeSearchQueryObject
 """,
    tags=['judge_operations', 'judge_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_judges(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
):
    """
    Judge search.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normJudgeSearch/{normJudgeSearchId}',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormJudgeSearchQueryObject
 """,
    tags=['judge_operations', 'judge_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_judges_by_id(
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
    norm_judge_search_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normJudgeSearchId'
    ),
):
    """
    Norm judge search results for a given normJudgeSearchId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normLawFirm/{normLawFirmId}',
    description=""" The Law Firm API allows you to look up Law Firms by normLawFirmId.
 """,
    tags=['law_firm_association_functions'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_law_firm_by_id(
    norm_law_firm_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normLawFirmId'
    )
):
    """
    Norm LawFirm Details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normLawFirm/{normLawFirmId}/associatedNormAttorneys',
    description=""" Returns a list of Attorneys associated to a Law Firm.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId**  | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **caseFiledDate**  | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo**  | Multiple Ids Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>        
## Example Query
Query to get all attorneys associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'law_firm_association_functions',
        'attorney_operations',
        'normalized_attorney_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_attorneys_associated_with_norm_law_firm(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_law_firm_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normLawFirmId'
    ),
):
    """
    Attorneys working for the Law Firm.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normLawFirm/{normLawFirmId}/associatedNormJudges',
    description=""" Returns list of Judges faced by the Law Firm.
<br><br>
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed  |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed  |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed  |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed  |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed  |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed  |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **caseFiledDate** | Single Allowed   |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple Ids Allowed  |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all judges associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'judge_operations',
        'law_firm_association_functions',
        'judge_association_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_judges_associated_with_norm_law_firm(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_law_firm_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normLawFirmId'
    ),
):
    """
    Judges Faced By the Law Firm.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normLawFirm/{normLawFirmId}/associatedNormParties',
    description=""" Returns list of Parties represented by the Law Firm.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all parties associated with LawFirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'party_information_retrieval',
        'law_firm_association_functions',
        'party_association_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_parties_associated_with_norm_law_firm(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_law_firm_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normLawFirmId'
    ),
):
    """
    Parties Represented by the Law Firm.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normLawFirm/{normLawFirmId}/caseCountAnalyticsByOpposingNormLawFirm',
    description=""" Returns Case Analytics by Norm Law Firm.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normPartyId** | Single Allowed |Find Analytics for a particular Party Object. | **normPartyId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by norm lawfirm with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_analysis_functions'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_opposing_firm(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_law_firm_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normLawFirmId'
    ),
):
    """
    Case Count Analytics by Opposing Norm Law Firm.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normLawFirmSearch',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormLawFirmSearchQueryObject
 """,
    tags=['law_firm_association_functions', 'attorney_search_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_law_firms(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
):
    """
    Law firm search.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normLawFirmSearch/{normLawFirmSearchId}',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormLawFirmSearchQueryObject
 """,
    tags=['law_firm_association_functions', 'attorney_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_law_firms_by_id(
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
    norm_law_firm_search_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normLawFirmSearchId'
    ),
):
    """
    Norm law firm search result for a given normLawFirmSearchId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normParty/{normPartyId}',
    description=""" The Party Details API allows you to look up Parties by normPartyId.
 """,
    tags=['party_information_retrieval', 'party_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_party_by_id(
    norm_party_id: constr(min_length=18, max_length=18) = Path(..., alias='normPartyId')
):
    """
    Norm Party Details.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normParty/{normPartyId}/associatedNormAttorneys',
    description=""" Returns a list of  Attorneys the Party has been represented by.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTqrgr5iFOXfIBmk")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all attorneys associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'attorney_operations',
        'attorney_representation_management',
        'party_information_retrieval',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_attorneys_associated_with_norm_party(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_party_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normPartyId'
    ),
):
    """
    Attorneys that represented the Party.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normParty/{normPartyId}/associatedNormJudges',
    description=""" Returns a list of Judges the party has faced.
<br><br>
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTqrgr5iFOXfIBmk")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all judges associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
<br><br>
 """,
    tags=[
        'judge_operations',
        'party_association_management',
        'normalized_attorney_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_judges_associated_with_norm_party(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_party_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normPartyId'
    ),
):
    """
    Judges Faced By the Party.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normParty/{normPartyId}/associatedNormLawFirms',
    description=""" Returns a list of Law Firms the Party has been represented by.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTqrgr5iFOXfIBmk")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **caseFiledDate** | Single Allowed |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get all lawfirms associated with Party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and  case filed date between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['law_firm_association_functions', 'party_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_norm_law_firms_associated_with_norm_party(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_party_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normPartyId'
    ),
):
    """
    Law Firms that represented the Party.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normParty/{normPartyId}/caseCountAnalyticsByOpposingNormParty',
    description=""" Returns Case Analytics by Opposing Norm Party.
## Terms and Connectors
| Connector | Schema   | Description  | Example |
| ------| ------| ------|------|
| **AND** ||Find analytics containing all connected terms. The word AND does not have to be capitalized.|**courtId:"CORTV4vCEaKrhystBz" AND courtLocationId:"COLO6b82CkRqS846hx"**|
| **IN()** || Allows you to specify multiple values, for a limit of up to 10.| **courtId IN ("CORTKQiA4LJuv54tEj","CORTV4vCEaKrhystBz")**|
| **courtId** | Multiple Ids Allowed |Find Analytics for a particular Court Object. | **courtId:"CORTV4vCEaKrhystBz"** |
| **courtSystemId** | Multiple Ids Allowed |Find Analytics for a particular Court System Object. | **courtSystemId:"COSYACHBdMewtaG5DY"** |
| **courtTypeId** | Multiple Ids Allowed |Find Analytics for a particular Court Type Object. | **courtTypeId:"COTPm8jjc2PAydpFhq"** |
| **courtLocationId** | Multiple Ids Allowed |Find Analytics for a particular Court Location Object. | **courtLocationId:"COLO6b82CkRqS846hx"** |
| **caseTypeId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Object. | **caseTypeId:"CTYPATMYyaJekdgj2c"** |
| **caseTypeGroupId** | Multiple Ids Allowed |Find Analytics for a particular Case Type Group Object. | **caseTypeGroupId:"CTYG8gZ6hPRKhhYi4Y"** |
| **areaOfLawId** | Multiple Ids Allowed |Find Analytics for a particular Area Of Law Object. | **areaOfLawId:"AOFL2UxEWfVmTPMyqf"** |
| **caseClassId** | Multiple Ids Allowed |Find Analytics for a particular Case Class Category Object. | **caseClassId:"CSCLNjbKTN7Yfo2wdb"** |
| **partyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Object. | **partyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **partyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Party Type Group Object. | **partyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **attorneyPartyRoleId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Object. | **attorneyPartyRoleId:"PTYRiP8nMgPxBsPc5i"** |
| **attorneyPartyRoleGroupId** | Multiple Ids Allowed |Find Analytics for a particular Attorney Party Type Group Object. | **attorneyPartyRoleGroupId:"PTYGBnjxbx6tKNfVEP"** |
| **normAttorneyId** | Single Allowed  |Find Analytics for a particular norm Attorney Object. | **normAttorneyId:"NATYfwmXwRHS279WPY"** |
| **normLawFirmId** | Single Allowed |Find Analytics for a particular Norm LawFirm Object. | **normLawFirmId:"NORGrPmQyLdx9NGHcT"** |
| **normJudgeId** | Single Allowed  |Find Analytics for a particular Judge Object. | **normJudgeId:"NJUDT7jCZyFNeLGpRq"** |
| **caseFiledDate** | Single Allowed  |Find Analytics within a particular date range. | **caseFiledDate:[2018-05-08T00:00:00+00:00TO2019-05-08T00:00:00+00:00]** |
| **JurisdictionGeo** | Multiple filters Allowed |Find Analytics within a particular Jurisdiction Geo. | **(JurisdictionGeo:(state:"California"))** |
| **confidenceScore** | Single Allowed |Find Analytics for a given ConfidenceScore  | **confidenceScore>=0.5** |
| **bestMatch** | Single Allowed |True if the normEntity has the highest Confidence Score of all possible normEntities | **bestMatch:true** |
<br>
## Example Query
Query to get case count grouped by norm party with norm id NORGrPmQyLdx9NGHcT of all cases with case type id CTYPATMYyaJekdgj2c and filed between Jan 1st, 2017 to Nov 30th,2021<br>
q=caseTypeId:"CTYPATMYyaJekdgj2c" AND caseFiledDate:[2017-01-01T00:00:00+00:00TO2021-11-30T00:00:00+00:00]
 """,
    tags=['case_analytics', 'case_analysis_functions'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_case_count_analytics_by_opposing_norm_party_for_a_norm_party(
    q: Optional[constr(max_length=2048)] = None,
    page_number: conint(ge=1) = Query(..., alias='pageNumber'),
    norm_party_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normPartyId'
    ),
):
    """
    Case Count Analytics by Opposing Norm Party.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normPartySearch',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormPartySearchQueryObject
 """,
    tags=['party_information_retrieval', 'party_association_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_parties(
    q: Optional[constr(min_length=3, max_length=2000)] = None,
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
):
    """
    Party search.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/normPartySearch/{normPartySearchId}',
    description=""" ### All query parameters supported for this API can be found in below schema section. Schema --> NormPartySearchQueryObject
 """,
    tags=['case_operations', 'party_information_retrieval'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def search_normalized_parties_by_id(
    page_number: Optional[conint(ge=1, le=1000)] = Query(None, alias='pageNumber'),
    norm_party_search_id: constr(min_length=18, max_length=18) = Path(
        ..., alias='normPartySearchId'
    ),
):
    """
    Norm party search results for a given normPartySearchId.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacer/importCaseByCourtUsingCaseNumber',
    description=""" Importing a Case in PACER using the court id and case number. 

	Workflow: 

		1.This API will return the Find Case results from the court site in a form of array of UniCourt Case Objects. These case objects will consists only Meta information of the case if not already present in the UniCourt Database. 

		2.To get the full updated case information one will have to request the caseUpdate API by passing the caseId. 

	Note: 

		1.Charges for Find Case in District, Bankruptcy and National Courts is free. Find case for Appeal Courts will be charged at minimum rate of $0.1. The fee charged by the court for find case can be found in the response of this API in the field courtFee. 

		2.The results of the search has less Meta information in case objects compared to the Meta information of cases found using the PCL search APIs. """,
    tags=['case_operations', 'pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def import_pacer_case_by_court_using_case_number(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: constr(min_length=3, max_length=50) = Query(..., alias='caseNumber'),
    court_id: constr(min_length=18, max_length=18) = Query(..., alias='courtId'),
):
    """
    Find PACER Case for a requested Case Number and Court.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/caseSearch/allCourts',
    description=""" PACER Case Locator Case Search API for All Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations', 'case_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def all_courts_pacer_case_locator_case_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/caseSearch/appealCourts',
    description=""" PACER Case Locator Case Search API for Appeal Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def appeal_courts_pacer_case_locator_case_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    nature_of_suits_array: Optional[NatureOfSuitsArray] = Query(
        None, alias='natureOfSuitsArray'
    ),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/caseSearch/bankruptcyCourts',
    description=""" PACER Case Locator Case Search API for Bankruptcy Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def bankruptcy_courts_pacer_case_locator_case_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    federal_bankruptcy_chapter_array: Optional[FederalBankruptcyChapterArray] = Query(
        None, alias='federalBankruptcyChapterArray'
    ),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    case_discharged_start_date: Optional[datetime] = Query(
        None, alias='caseDischargedStartDate'
    ),
    case_discharged_end_date: Optional[datetime] = Query(
        None, alias='caseDischargedEndDate'
    ),
    case_dismissed_start_date: Optional[datetime] = Query(
        None, alias='caseDismissedStartDate'
    ),
    case_dismissed_end_date: Optional[datetime] = Query(
        None, alias='caseDismissedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for Bankruptcy Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/caseSearch/civilCourts',
    description=""" PACER Case Locator Case Search API for Civil Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def civil_courts_pacer_case_locator_case_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    nature_of_suits_array: Optional[NatureOfSuitsArray] = Query(
        None, alias='natureOfSuitsArray'
    ),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/caseSearch/criminalCourts',
    description=""" PACER Case Locator Case Search API for Criminal Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def criminal_courts_pacer_case_locator_case_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/caseSearch/multiDistrictCourts',
    description=""" PACER Case Locator Case Search API for MultiDistrict Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def multi_district_courts_pacer_case_locator_case_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    jpml_number: Optional[int] = Query(None, alias='jpmlNumber'),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/partySearch/allCourts',
    description=""" PACER Case Locator Search API for All Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def all_courts_pacer_case_locator_party_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    last_name: Optional[constr(max_length=50)] = Query(None, alias='lastName'),
    first_name: Optional[constr(max_length=100)] = Query(None, alias='firstName'),
    middle_name: Optional[constr(max_length=100)] = Query(None, alias='middleName'),
    generation: Optional[constr(max_length=5)] = None,
    party_type: Optional[constr(max_length=50)] = Query(None, alias='partyType'),
    party_exact_name_match: Optional[bool] = Query(None, alias='partyExactNameMatch'),
    party_role_array: Optional[PartyRoleArray] = Query(None, alias='partyRoleArray'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_year_from: Optional[int] = Query(None, alias='caseYearFrom'),
    case_year_to: Optional[int] = Query(None, alias='caseYearTo'),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/partySearch/appealCourts',
    description=""" PACER Case Locator Party Search API for Appeal Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def appeal_courts_pacer_case_locator_party_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    last_name: Optional[constr(max_length=50)] = Query(None, alias='lastName'),
    first_name: Optional[constr(max_length=100)] = Query(None, alias='firstName'),
    middle_name: Optional[constr(max_length=100)] = Query(None, alias='middleName'),
    generation: Optional[constr(max_length=5)] = None,
    party_type: Optional[constr(max_length=50)] = Query(None, alias='partyType'),
    party_exact_name_match: Optional[bool] = Query(None, alias='partyExactNameMatch'),
    party_role_array: Optional[PartyRoleArray] = Query(None, alias='partyRoleArray'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_year_from: Optional[int] = Query(None, alias='caseYearFrom'),
    case_year_to: Optional[int] = Query(None, alias='caseYearTo'),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/partySearch/bankruptcyCourts',
    description=""" PACER Case Locator Party Search API for Bankruptcy Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def bankruptcy_courts_pacer_case_locator_party_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    last_name: Optional[constr(max_length=50)] = Query(None, alias='lastName'),
    first_name: Optional[constr(max_length=100)] = Query(None, alias='firstName'),
    middle_name: Optional[constr(max_length=100)] = Query(None, alias='middleName'),
    generation: Optional[constr(max_length=5)] = None,
    party_type: Optional[constr(max_length=50)] = Query(None, alias='partyType'),
    party_exact_name_match: Optional[bool] = Query(None, alias='partyExactNameMatch'),
    party_role_array: Optional[PartyRoleArray] = Query(None, alias='partyRoleArray'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_year_from: Optional[int] = Query(None, alias='caseYearFrom'),
    case_year_to: Optional[int] = Query(None, alias='caseYearTo'),
    ssn_or_ein: Optional[constr(max_length=9)] = Query(None, alias='ssnOrEin'),
    four_digit_ssn: Optional[constr(max_length=4)] = Query(None, alias='fourDigitSsn'),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    case_discharged_start_date: Optional[datetime] = Query(
        None, alias='caseDischargedStartDate'
    ),
    case_discharged_end_date: Optional[datetime] = Query(
        None, alias='caseDischargedEndDate'
    ),
    case_dismissed_start_date: Optional[datetime] = Query(
        None, alias='caseDismissedStartDate'
    ),
    case_dismissed_end_date: Optional[datetime] = Query(
        None, alias='caseDismissedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/partySearch/civilCourts',
    description=""" PACER Case Locator Party Search API for Civil Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def civil_courts_pacer_case_locator_party_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    last_name: Optional[constr(max_length=50)] = Query(None, alias='lastName'),
    first_name: Optional[constr(max_length=100)] = Query(None, alias='firstName'),
    middle_name: Optional[constr(max_length=100)] = Query(None, alias='middleName'),
    generation: Optional[constr(max_length=5)] = None,
    party_type: Optional[constr(max_length=50)] = Query(None, alias='partyType'),
    party_exact_name_match: Optional[bool] = Query(None, alias='partyExactNameMatch'),
    party_role_array: Optional[PartyRoleArray] = Query(None, alias='partyRoleArray'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_year_from: Optional[int] = Query(None, alias='caseYearFrom'),
    case_year_to: Optional[int] = Query(None, alias='caseYearTo'),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/partySearch/criminalCourts',
    description=""" PACER Case Locator Party Search API for Criminal Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def criminal_courts_pacer_case_locator_party_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    last_name: Optional[constr(max_length=50)] = Query(None, alias='lastName'),
    first_name: Optional[constr(max_length=100)] = Query(None, alias='firstName'),
    middle_name: Optional[constr(max_length=100)] = Query(None, alias='middleName'),
    generation: Optional[constr(max_length=5)] = None,
    party_type: Optional[constr(max_length=50)] = Query(None, alias='partyType'),
    party_exact_name_match: Optional[bool] = Query(None, alias='partyExactNameMatch'),
    party_role_array: Optional[PartyRoleArray] = Query(None, alias='partyRoleArray'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_year_from: Optional[int] = Query(None, alias='caseYearFrom'),
    case_year_to: Optional[int] = Query(None, alias='caseYearTo'),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCaseLocator/partySearch/multiDistrictCourts',
    description=""" PACER Case Locator Party Search API for MultiDistrict Courts. """,
    tags=['pacer_case_locator_functions', 'case_locator_operations'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def multi_district_courts_pacer_case_locator_party_search(
    pacer_user_id: constr(min_length=6, max_length=20) = Query(
        ..., alias='pacerUserId'
    ),
    pacer_client_code: constr(min_length=1, max_length=32) = Query(
        ..., alias='pacerClientCode'
    ),
    case_number: Optional[constr(min_length=3, max_length=50)] = Query(
        None, alias='caseNumber'
    ),
    jpml_number: Optional[int] = Query(None, alias='jpmlNumber'),
    pacer_case_id: Optional[int] = Query(None, alias='pacerCaseId'),
    last_name: Optional[constr(max_length=50)] = Query(None, alias='lastName'),
    first_name: Optional[constr(max_length=100)] = Query(None, alias='firstName'),
    middle_name: Optional[constr(max_length=100)] = Query(None, alias='middleName'),
    generation: Optional[constr(max_length=5)] = None,
    party_type: Optional[constr(max_length=50)] = Query(None, alias='partyType'),
    party_exact_name_match: Optional[bool] = Query(None, alias='partyExactNameMatch'),
    party_role_array: Optional[PartyRoleArray] = Query(None, alias='partyRoleArray'),
    case_title: Optional[constr(max_length=255)] = Query(None, alias='caseTitle'),
    case_office: Optional[int] = Query(None, alias='caseOffice'),
    case_sequence_number: Optional[int] = Query(None, alias='caseSequenceNumber'),
    case_year: Optional[int] = Query(None, alias='caseYear'),
    case_type_array: Optional[CaseTypeArray] = Query(None, alias='caseTypeArray'),
    court_region_id_array: Optional[CourtRegionIdArray] = Query(
        None, alias='courtRegionIdArray'
    ),
    case_year_from: Optional[int] = Query(None, alias='caseYearFrom'),
    case_year_to: Optional[int] = Query(None, alias='caseYearTo'),
    case_filed_start_date: Optional[datetime] = Query(None, alias='caseFiledStartDate'),
    case_filed_end_date: Optional[datetime] = Query(None, alias='caseFiledEndDate'),
    case_terminated_start_date: Optional[datetime] = Query(
        None, alias='caseTerminatedStartDate'
    ),
    case_terminated_end_date: Optional[datetime] = Query(
        None, alias='caseTerminatedEndDate'
    ),
    sort_parameter_query: Optional[constr(min_length=5, max_length=100)] = Query(
        'sort=caseYear,DESC', alias='sortParameterQuery'
    ),
    case_status: Optional[CaseStatus1] = Query(None, alias='caseStatus'),
    page_number: Optional[int] = Query(None, alias='pageNumber'),
):
    """
    PACER Case Locator Search API for All Courts.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCredential',
    description=""" List registered PACER credentials. """,
    tags=['pacer_credential_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_pacer_credential(
    page_number: Optional[conint(ge=1)] = Query(None, alias='pageNumber')
):
    """
    Get Pacer Credential List.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.put(
    '/pacerCredential',
    description=""" Register PACER credentials with UniCourt. """,
    tags=['pacer_credential_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def add_pacer_credential(body: PacerCredentialRequest = None):
    """
    Add Pacer Credential.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.delete(
    '/pacerCredential/{pacerUserId}',
    description=""" De-register the PACER credentials for the specified PACER username. """,
    tags=['pacer_credential_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def remove_pacer_credential_by_id(
    pacer_user_id: constr(min_length=6, max_length=40) = Path(..., alias='pacerUserId')
):
    """
    Remove Pacer credential for a specific Pacer User Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/pacerCredential/{pacerUserId}',
    description=""" Retrieve the PACER credentials for the specified PACER username. """,
    tags=['pacer_credential_management'],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_pacer_credential_by_id(
    pacer_user_id: constr(min_length=6, max_length=40) = Path(..., alias='pacerUserId')
):
    """
    Get Pacer Credential for a requested pacer User Id.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/party/{partyId}',
    description=""" Retrieve the party with the specified partyId value. """,
    tags=[
        'party_information_retrieval',
        'attorney_operations',
        'party_association_management',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_party_by_id(
    party_id: constr(min_length=18, max_length=18) = Path(..., alias='partyId')
):
    """
    Gets details for a requested Party ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/party/{partyId}/associatedAttorneys',
    description=""" Retrieve the attorneys in the case with the specified partyId value. """,
    tags=[
        'attorney_operations',
        'party_association_management',
        'party_information_retrieval',
    ],
    security=[
        HTTPBearer(name="None"),
    ],
)
def get_party_associated_attorneys(
    page_number: Optional[int] = Query(None, alias='pageNumber'),
    party_id: constr(min_length=18, max_length=18) = Path(..., alias='partyId'),
):
    """
    Gets Associated Attorney details for a requested Party ID.
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
