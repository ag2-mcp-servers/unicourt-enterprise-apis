# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T11:26:44+00:00

from __future__ import annotations

from datetime import date as date_aliased
from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import (
    AnyUrl,
    BaseModel,
    ConfigDict,
    Field,
    RootModel,
    confloat,
    conint,
    constr,
)


class AccessTokenIdResponse(BaseModel):
    issueAddress: constr(min_length=7, max_length=15) = Field(
        ..., description='Ip address.', examples=['192.0.2.1']
    )
    issuedDate: datetime = Field(
        ...,
        description='Date when access token was created.',
        examples=['2022-11-10T10:17:56+00:00'],
    )
    object: constr(min_length=21, max_length=21) = Field(
        ..., description='Name of the object.', examples=['AccessTokenIdResponse']
    )
    tokenId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for the access token.',
        examples=['TKID384a057WFC3Dp3'],
    )


class AccessTokenRequest(BaseModel):
    clientId: constr(min_length=32, max_length=32) = Field(
        ...,
        description='Your Client ID obtainable by logging into your UniCourt account.',
        examples=['G3cfixgetVzfaoszGOBp5LPGtih1nMJ9'],
    )
    clientSecret: constr(min_length=64, max_length=64) = Field(
        ...,
        description='Your Client Secret ID obtainable by logging into your UniCourt account.',
        examples=['u6PTti57IjPlrwU5MzOwLBD2MCwx-IEbo8sTStTivh1I-EqQ8Jcm27Gfo2GhpHCw'],
    )


class AccessTokenResponse(BaseModel):
    accessToken: constr(min_length=700, max_length=2000) = Field(
        ...,
        description='Access token for API.',
        examples=[
            'eyJhbG44ciOiJS111UzI1NiIsInR5cCI6IkpXVCIsImtpZCI6I11111ktfX2NsOVhLUDJYMmtBVGRBSVkzQiJ9.eyJodHRwczovL3VuaWNvdXJ0LmNvbS9jbGllbnRfaWQiOiIxbWVOcHRBeXJUUFN2UjBSbVVxdEh2QVNoeDVqVmI2RCIsImh0dHBzOi8vdW5pY291cnQuY29tL2NsaWVudF9uYW1lIjoiYXBvbGxvIiwiaHR0cHM6Ly91bmljb3VydC5jb20vYWNjb3VudF9pZCI6IkFQTzAwMDBBMSIsImlzcyI6Imh0dHBzOi8vdGVzdHVjLnVzLmF1dGgwLmNvbS8iLCJzdWIiOiIxbWVOcHRBeXJUUFN2UjBSbVVxdEh2QVNoeDVqVmI2REBjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly85dGxsbG1oZnhkLmV4ZWN1dGUtYXBpLnVzLWVhc3QtMS5hbWF6b25hd3MuY29tIiwiaWF0IjoxNjIwNzA4NjAzLCJleHAiOjE2MjA3OTUwMDMsImF6cCI6IjFtZU5wdEF5clRQU3ZSMFJtVXF0SHZBU2h4NWpWYjZEIiwic2NvcGUiOiJleHRyYSIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.TjhNCPvt5bRDW5Kp9OW9-epch9ggoYiK-85f6l7illLtKMeEoD3myllyIXo_ltZv7TDbmSg9tmHZ2V4mPiGvn-Fc9MwGXyUN7LjFF0tpnwysqgTVq_pvnCNe-xLOR_clmkl881QlUfXwB0R0PjhU00_c63ImSISC1Tv4GfawYLQwBy1Q22-rqB4ZsrSszRMo0rTOCu4d7KVc9MgcjA_idz45E9BxR2UbZ6lAbAXp-C1AqR8Dm40BHeUy5oJFFpzoP46sqTcdQHzwuMX5AhK6uGugVqlHpUbwRy9SDCxCldArz5j0Ab_aaZ7zIbuqgE-XueSlug_n2MenElUAeBKe-g'
        ],
    )
    object: constr(min_length=19, max_length=19) = Field(
        ..., description='Name of the object.', examples=['AccessTokenResponse']
    )
    tokenId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for the access token.',
        examples=['TKID384a057WFC3Dp3'],
    )
    tokenType: constr(min_length=6, max_length=6) = Field(
        ..., description='Token type.', examples=['Bearer']
    )


class AdditionalLevels(BaseModel):
    level1: constr(min_length=1, max_length=255)
    level2: constr(min_length=1, max_length=255)
    level3: constr(min_length=1, max_length=255)
    level4: constr(min_length=1, max_length=255)
    object: constr(min_length=16, max_length=16) = Field(
        ..., examples=['AdditionalLevels']
    )


class Address(BaseModel):
    city: constr(min_length=1, max_length=100) = Field(
        ..., description='City', examples=['SPOKANE']
    )
    countryCode: constr(min_length=2, max_length=3) = Field(
        ...,
        description='ISO 3166-1 alpha-3 (https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#Officially_assigned_code_elements). Code of the country if country name is present.',
        examples=['USA'],
    )
    countryName: constr(min_length=1, max_length=100) = Field(
        ...,
        description='Country Name if present else default value.',
        examples=['CANADA'],
    )
    firstFetchDate: datetime = Field(
        ...,
        description='Date at which this record is created in UniCourt.',
        examples=['2017-07-21T17:32:28+00:00'],
    )
    isVisible: bool = Field(
        ...,
        description='Boolean indicating if the address is visible or not.',
        examples=[False],
    )
    lastFetchDate: datetime = Field(
        ...,
        description='Date at which this record was updated in UniCourt.',
        examples=['2017-07-21T17:32:28+00:00'],
    )
    latitude: confloat(ge=-90.0, le=90.0) = Field(
        ...,
        description='Coordinates at geographic coordinate system.',
        examples=[26.93852],
    )
    longitude: confloat(ge=-180.0, le=180.0) = Field(
        ...,
        description='Coordinates at geographic coordinate system.',
        examples=[-82.04752],
    )
    object: constr(min_length=7, max_length=7) = Field(..., examples=['Address'])
    stateCode: constr(min_length=2, max_length=2) = Field(
        ...,
        description='State Code if the state is a US state else contains null.',
        examples=['NY'],
    )
    stateName: constr(min_length=1, max_length=100) = Field(
        ...,
        description='State Name if present else default value.',
        examples=['NEW YORK'],
    )
    streetAddress1: constr(min_length=1, max_length=250) = Field(
        ...,
        description='1st part of the street address.',
        examples=['4407 N DIVISION ST'],
    )
    streetAddress2: constr(min_length=1, max_length=150) = Field(
        ..., description='2nd part of the street address.', examples=['STE 516']
    )
    zip: constr(min_length=1, max_length=10) = Field(
        ..., description='Zip code of the address.', examples=['99207']
    )
    zip4: constr(min_length=4, max_length=4) = Field(
        ...,
        description='4 digit extension of the zip code if the address is a US address.',
        examples=['1005'],
    )


class AreaOfLaw(BaseModel):
    areaOfLawId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['AOFLGAd9Ah5qkTRNw9']
    )
    caseClass: constr(min_length=1, max_length=255) = Field(..., examples=['Civil'])
    caseClassId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CSCLNjbKTN7Yfo2wdb']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Tax and Revenue']
    )
    object: constr(min_length=9, max_length=9) = Field(..., examples=['AreaOfLaw'])


class AreaOfLawResponse(BaseModel):
    areaOfLawArray: List[AreaOfLaw] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=17, max_length=17) = Field(
        ..., examples=['AreaOfLawResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class EntityType(Enum):
    Partner = 'Partner'
    Agent = 'Agent'
    CEO = 'CEO'
    Partner_General_Member = 'Partner/General Member'
    Partner_GeneralMember = 'Partner/GeneralMember'


class AttorneyAnalyticsAPI(BaseModel):
    associatedNormJudgesAPI: AnyUrl
    associatedNormLawFirmsAPI: AnyUrl
    associatedNormPartiesAPI: AnyUrl
    caseCountAnalyticsByOpposingNormAttorneyAPI: AnyUrl
    caseCountAnalyticsByOpposingNormLawFirmAPI: AnyUrl
    caseCountAnalyticsByOpposingNormPartyAPI: AnyUrl
    normAttorneyAPI: AnyUrl = Field(
        ..., description='Link to Details for the Attorney.'
    )
    object: constr(max_length=20)


class AttorneyLawFirm(BaseModel):
    attorneyLawFirmId: constr(min_length=17, max_length=18) = Field(
        ...,
        description='ID for the law firm of an attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.',
        examples=['ALFIgu26ce47ad7674'],
    )
    firstFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Is the date when the document was first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    isVisible: bool = Field(
        ...,
        description='Signifies if the attorney as this attorney type is currently isVisible or not for the case.',
        examples=[True],
    )
    lastFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Is the date when the document was last fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    name: constr(min_length=1, max_length=250) = Field(
        ...,
        description='Name of the law firm as provided by Court.',
        examples=['BUTLER & HOSCH PA'],
    )
    object: constr(min_length=15, max_length=15) = Field(
        ..., description='Name of the object'
    )


class AttorneyRepresentationType(BaseModel):
    attorneyRepresentationTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['ATRPYgPMGJufoCsR6Q']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Self Represented']
    )
    object: constr(min_length=26, max_length=26) = Field(
        ..., examples=['AttorneyRepresentationType']
    )


class AttorneyRepresentationTypeResponse(BaseModel):
    attorneyRepresentationTypeArray: List[AttorneyRepresentationType] = Field(
        ..., max_length=100
    )
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=34, max_length=34) = Field(
        ..., examples=['AttorneyRepresentationTypeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class AttorneyType(BaseModel):
    attorneyTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['ATYPWXtARwvzu5HLcf']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Lead Attorney'])
    object: constr(min_length=12, max_length=12) = Field(..., examples=['AttorneyType'])


class AttorneyTypeResponse(BaseModel):
    attorneyTypeArray: List[AttorneyType] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=20, max_length=20) = Field(
        ..., examples=['AttorneyTypeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class Status(Enum):
    Active = 'Active'
    Inactive = 'Inactive'
    Not_Classified = 'Not Classified'
    Unknown = 'Unknown'


class BarRecordPreview(BaseModel):
    barNumber: constr(max_length=250)
    barSourceType: constr(max_length=70)
    object: constr(max_length=16)
    stateCode: constr(max_length=2)


class AdministrativeActionsArrayItem(BaseModel):
    caseNumber: constr(max_length=250)
    description: constr(max_length=250)
    effectiveDate: datetime
    resultingStatus: constr(max_length=250)
    type: constr(max_length=250)


class AdvancedDegreeArrayItem(BaseModel):
    area: constr(max_length=250)
    degree: constr(max_length=250)


class BarStatusArrayItem(BaseModel):
    date: constr(max_length=25)
    status: constr(max_length=250)


class BoardCertificationsArrayItem(BaseModel):
    area: constr(max_length=250)
    year: constr(max_length=250)


class CommitteesArrayItem(BaseModel):
    committee: constr(max_length=250)
    office: constr(max_length=250)
    term: constr(max_length=250)


class CourtHistoryArrayItem(BaseModel):
    action: constr(max_length=250)
    actionComments: constr(max_length=2000)
    reinstatedDate: datetime
    startDate: datetime


class CourtOfAdmissions(BaseModel):
    courtStateArray: List[constr(max_length=250)]
    federalArray: List[constr(max_length=250)]
    otherCourtsArray: List[constr(max_length=500)]


class DisciplinaryHistoryArrayItem(BaseModel):
    action: constr(max_length=250)
    caseNumber: constr(max_length=250)
    complaint: constr(max_length=1000)
    contactId: constr(min_length=1, max_length=250)
    dateOfAction: datetime
    definition: constr(max_length=1000)
    disciplinaryDecision: constr(max_length=250)
    entryDate: datetime
    information: constr(max_length=250)
    link: constr(max_length=250)
    note: constr(max_length=1000)
    probationDate: datetime
    reinstatedDate: datetime
    rule: constr(max_length=250)
    ruleNumber: constr(max_length=250)
    sectionDate: datetime
    status: constr(max_length=250)
    stayDate: datetime
    supremeCourt: constr(max_length=250)
    term: constr(max_length=250)
    typeOfAction: constr(max_length=250)


class DisciplineSummariesArrayItem(BaseModel):
    date: datetime
    link: constr(max_length=250)
    title: constr(max_length=250)


class EmploymentHistoryArrayItem(BaseModel):
    employer: constr(max_length=250)
    endDate: datetime
    startDate: datetime


class FeesOptionsArrayItem(BaseModel):
    contingencyFees: constr(max_length=250)
    flatFees: constr(max_length=250)
    hourlyRate: constr(max_length=250)
    paymentPlans: constr(max_length=250)
    slidingScaleFees: constr(max_length=250)


class InvolvementsArrayItem(BaseModel):
    name: constr(max_length=500)
    position: constr(max_length=250)
    type: constr(max_length=250)


class LawSchoolArrayItem(BaseModel):
    lawSchool: constr(max_length=250)
    lawSchoolGraduatedDate: datetime


class Name(BaseModel):
    firstName: constr(max_length=500)
    lastName: constr(max_length=500)
    middleName: constr(max_length=500)
    name: constr(max_length=500)
    prefix: constr(max_length=250)
    suffix: constr(max_length=250)


class OpenActionStatusArrayItem(BaseModel):
    date: datetime
    reason: constr(max_length=250)


class OtherJurisdictionArrayItem(BaseModel):
    barNumber: constr(max_length=250)
    state: constr(max_length=250)


class PublicHearingArrayItem(BaseModel):
    conduct: constr(max_length=500)
    date: datetime
    issuedBy: constr(max_length=250)
    order: constr(max_length=250)
    respondent: constr(max_length=250)


class ReasonForInactivation(BaseModel):
    caseNumber: constr(max_length=250)
    link: constr(max_length=250)


class RelatedCasesArrayItem(BaseModel):
    caseDetails: constr(max_length=250)
    caseId: constr(min_length=1, max_length=250)


class SourceInfo(BaseModel):
    url: AnyUrl


class StatewideGrievanceCommitteeHistoryArrayItem(BaseModel):
    finalDecision: constr(max_length=250)
    finalDecisionDate: datetime
    grievanceComplaintNumber: constr(max_length=250)
    publicComments: constr(max_length=1000)


class StatusHistoryArrayItem(BaseModel):
    effectiveDate: datetime
    statusChange: constr(max_length=250)


class TenYearDisciplineArrayItem(BaseModel):
    actionDate: datetime
    description: constr(max_length=250)
    reference: constr(max_length=250)


class BarSourceData(BaseModel):
    administrativeActionsArray: List[AdministrativeActionsArrayItem]
    admissionType: constr(max_length=250)
    advancedDegreeArray: List[AdvancedDegreeArrayItem]
    appellateCourtDistrict: constr(max_length=250)
    appellateDivisionDepartment: constr(max_length=250)
    attorneyGroup: constr(max_length=250)
    authorized: constr(max_length=250)
    barLawFirm: constr(max_length=250)
    barServiceClass: constr(max_length=250)
    barStatusArray: List[BarStatusArrayItem]
    bio: constr(max_length=5000)
    boardCertificationsArray: List[BoardCertificationsArrayItem]
    boardDistrict: constr(max_length=250)
    circuit: constr(max_length=250)
    clientsRepresentedArray: List[constr(max_length=250)]
    comments: constr(max_length=250)
    committeesArray: List[CommitteesArrayItem]
    courtHistoryArray: List[CourtHistoryArrayItem]
    courtOfAdmissions: CourtOfAdmissions
    courtServiceEmail: constr(max_length=250)
    disciplinaryHistoryArray: List[DisciplinaryHistoryArrayItem]
    disciplineSummariesArray: List[DisciplineSummariesArrayItem]
    dismissalsArray: List[constr(max_length=250)]
    district: constr(max_length=250)
    employmentHistoryArray: List[EmploymentHistoryArrayItem]
    expirationDate: datetime
    feesOptionsArray: List[FeesOptionsArrayItem]
    firmSize: constr(max_length=250)
    firmWebsite: constr(max_length=1000)
    firstAdmittedDate: datetime = Field(
        ...,
        description='The firstAdmittedDate is the date when an attorney was admitted to the bar for the very first time regardless of which U.S state.',
    )
    firstAdmittedYear: int
    homeCounty: constr(max_length=250)
    inGoodStanding: constr(max_length=250)
    insurance: constr(max_length=500)
    involvementsArray: List[InvolvementsArrayItem]
    judicialDistrict: constr(max_length=250)
    jurisType: constr(max_length=250)
    languagesArray: List[constr(max_length=1000)]
    lastRenewalDate: datetime
    lawSchoolArray: List[LawSchoolArrayItem]
    legalSpecialityArray: List[constr(max_length=250)]
    licenseType: constr(max_length=250)
    name: Name
    nextRegistration: datetime
    nextRenewalDate: datetime
    object: constr(max_length=13)
    openActionStatusArray: List[OpenActionStatusArrayItem]
    otherJurisdictionArray: List[OtherJurisdictionArrayItem]
    otherNameArray: List[constr(max_length=500)]
    parish: constr(max_length=250)
    pendingProceedingArray: List[constr(max_length=250)]
    position: constr(max_length=250)
    practiceAreaArray: List[constr(max_length=250)]
    practiceLocationArray: List[constr(max_length=250)]
    privateLawPractice: constr(max_length=250)
    profileLastCertified: datetime
    publicHearingArray: List[PublicHearingArrayItem]
    reasonForInactivation: ReasonForInactivation
    relatedCasesArray: List[RelatedCasesArrayItem]
    sectionsArray: List[constr(max_length=250)]
    servicesArray: List[constr(max_length=250)]
    sourceInfo: SourceInfo
    statewideGrievanceCommitteeHistoryArray: List[
        StatewideGrievanceCommitteeHistoryArrayItem
    ]
    status: constr(max_length=500)
    statusDate: datetime
    statusHint: constr(max_length=500)
    statusHistoryArray: List[StatusHistoryArrayItem]
    tenYearDisciplineArray: List[TenYearDisciplineArrayItem]
    undergraduateSchool: constr(max_length=250)
    yearsOfPractice: constr(max_length=250)


class ApiCallsBillable(BaseModel):
    count: int = Field(
        ..., description='Total API calls billed  for the billing cycle', examples=[100]
    )
    lastUpdated: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Last Updated date and time for the field apiCallsBillable',
        examples=['2022-11-10T10:17:56+00:00'],
    )


class ApiCallsCredited(BaseModel):
    count: int = Field(
        ...,
        description='Total API calls credited back for the billing cycle',
        examples=[100],
    )
    lastUpdated: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Last Updated date and time for the field apiCallsCredited',
        examples=['2022-11-10T10:17:56+00:00'],
    )


class ApiCallsMade(BaseModel):
    count: int = Field(
        ..., description='Total API calls made for the billing cycle', examples=[100]
    )
    lastUpdated: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Last Updated date and time for the field apiCallsMade',
        examples=['2022-11-10T10:17:56+00:00'],
    )


class BillingCycle(BaseModel):
    endDate: date_aliased = Field(
        ...,
        description='End date of the billing cycle.',
        examples=['2022-08-22T00:00:00+00:00'],
    )
    startDate: date_aliased = Field(
        ...,
        description='Start date of the billing cycle.',
        examples=['2022-08-22T00:00:00+00:00'],
    )


class BillingCycleUsageResponse(BaseModel):
    apiCallsBillable: ApiCallsBillable = Field(
        ..., description='Total number of API calls billed for the billing cycle.'
    )
    apiCallsCredited: ApiCallsCredited = Field(
        ...,
        description='Total number of callbackFailures including caseUpdate, caseDocumentOrder and caseExport for the billing cycle.',
    )
    apiCallsMade: ApiCallsMade = Field(
        ..., description='Total API calls made for the billing cycle.'
    )
    apiUsage: Dict[str, Any] = Field(
        ..., description='StartDate and endDate of the billing cycle.'
    )
    billingCycle: BillingCycle = Field(
        ..., description='StartDate and endDate of the billing cycle.'
    )
    days: Dict[str, Any] = Field(..., description='Billing cycle days.')
    object: constr(min_length=25, max_length=25) = Field(
        ..., description='Name of the object.', examples=['BillingCycleUsageResponse']
    )
    totalCasesTracked: int = Field(
        ..., description='Total number of successful case tracks.', examples=[200]
    )


class BillingCycleArrayItem(RootModel[Optional[date_aliased]]):
    root: Optional[date_aliased] = Field(None, examples=['2023-01-10to2023-02-09'])


class BillingCyclesResponse(BaseModel):
    billingCycleArray: List[BillingCycleArrayItem] = Field(
        ...,
        description='Array of previous 12 Billing Cycles.',
        max_length=12,
        min_length=0,
    )
    object: constr(min_length=21, max_length=21) = Field(
        ..., description='Name of the object.', examples=['BillingCyclesResponse']
    )


class CaseDocumentOrderCallbacks(BaseModel):
    count: int = Field(..., examples=[7])
    link: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/caseDocumentOrder/callbacks?date=2022-03-08T10:17:56+00:00'
        ],
    )


class CaseExportCallbacks(BaseModel):
    count: int = Field(..., examples=[10])
    link: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/caseExport/callbacks?date=2022-03-08T10:17:56+00:00'
        ],
    )


class CallbackListResponse(BaseModel):
    caseDocumentOrderCallbacks: CaseDocumentOrderCallbacks
    caseExportCallbacks: CaseExportCallbacks
    object: constr(min_length=20, max_length=20) = Field(
        ..., description='Name of the object.', examples=['CallbackListResponse']
    )


class SourceDataStatusEnum(Enum):
    NO_LONGER_AVAILABLE_IN_COURT = 'NO_LONGER_AVAILABLE_IN_COURT'
    SOURCE_DEPRECATED = 'SOURCE_DEPRECATED'


class SourceDataStatus(RootModel[Optional[SourceDataStatusEnum]]):
    root: Optional[SourceDataStatusEnum] = Field(
        None,
        description='The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.',
        examples=['SOURCE_DEPRECATED'],
    )


class CaseAnalyticsAPI(BaseModel):
    caseCountAnalyticsByAreaOfLawAPI: AnyUrl
    caseCountAnalyticsByCaseClassAPI: AnyUrl
    caseCountAnalyticsByCaseTypeAPI: AnyUrl
    caseCountAnalyticsByCaseTypeGroupAPI: AnyUrl
    caseCountAnalyticsByCourtAPI: AnyUrl
    caseCountAnalyticsByCourtLocationAPI: AnyUrl
    caseCountAnalyticsByCourtSystemAPI: AnyUrl
    caseCountAnalyticsByCourtTypeAPI: AnyUrl
    caseCountAnalyticsByJurisdictionGeoAPI: AnyUrl
    caseCountAnalyticsByPartyRoleAPI: AnyUrl
    caseCountAnalyticsByPartyRoleGroupAPI: AnyUrl
    object: constr(max_length=16)
    totalCases: int


class CaseClass(BaseModel):
    caseClassId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CSCLNjbKTN7Yfo2wdb']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Civil'])
    object: constr(min_length=9, max_length=9) = Field(..., examples=['CaseClass'])


class CaseClassCoverage(BaseModel):
    caseClass: CaseClass
    caseCount: int = Field(
        ..., description='Total Cases for a specific CourtLocation.', examples=[1480157]
    )
    caseDocumentInLibraryCount: int = Field(
        ...,
        description='Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocationy.',
        examples=[1256],
    )
    caseDocumentInLibraryInLastThirtyDaysCount: int = Field(
        ...,
        description='Case Documents that were added to UniCourt Crowd Source Library for a specific CourtLocation in last 30 days.',
        examples=[1480157],
    )
    casesInLastThirtyDaysCount: int = Field(
        ...,
        description='Cases in last 30 days that were added to UniCourt for a specific CourtLocation',
        examples=[8889],
    )
    courtServiceStatusAPI: constr(min_length=50, max_length=250) = Field(
        ...,
        description='API Link to the Court Service status with filters of court and case class',
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/courtServiceStatus?q=((Court:(courtId:"CORTV4vCEaKrhystBz")) AND (CaseClass:(caseClassId:"CSCLNjbKTN7Yfo2wdb")))'
        ],
    )
    freeCaseDocumentCount: int = Field(
        ...,
        description='Free Case Documents for a specific CourtLocation.',
        examples=[12545],
    )
    freeCaseDocumentsInLastThirtyDaysCount: int = Field(
        ...,
        description='Free Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.',
        examples=[12545],
    )
    object: constr(min_length=17, max_length=17) = Field(
        ..., description='Name of the object'
    )
    paidCaseDocumentCount: int = Field(
        ...,
        description='Paid Case Documents for a specific CourtLocation.',
        examples=[12545],
    )
    paidCaseDocumentsInLastThirtyDaysCount: int = Field(
        ...,
        description='Paid Case Documents in last 30 days that were added to UniCourt for a specific CourtLocation.',
        examples=[125],
    )


class CaseClassResponse(BaseModel):
    caseClassArray: List[CaseClass] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=17, max_length=17) = Field(
        ..., examples=['CaseClassResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CaseCountAnalyticsByAreaOfLaw(BaseModel):
    areaOfLaw: AreaOfLaw
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    object: constr(max_length=29)


class CaseCountAnalyticsByAreaOfLawResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=37)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByAreaOfLaw]
    totalAreaOfLawCount: int = Field(
        ..., description='Total no. of Area Of Law for this criteria.'
    )
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByCaseClass(BaseModel):
    caseClass: CaseClass
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    object: constr(max_length=29)


class CaseCountAnalyticsByCaseClassResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=37)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCaseClass]
    totalCaseClassCount: int = Field(
        ..., description='Total no. of Case Class for this criteria.'
    )
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class GroupedBy(Enum):
    Yearly = 'Yearly'
    Quarterly = 'Quarterly'
    Monthly = 'Monthly'
    Weekly = 'Weekly'


class MonthStringEnum(Enum):
    January = 'January'
    February = 'February'
    March = 'March'
    April = 'April'
    May = 'May'
    June = 'June'
    July = 'July'
    August = 'August'
    September = 'September'
    October = 'October'
    November = 'November'
    December = 'December'


class MonthString(RootModel[Optional[MonthStringEnum]]):
    root: Optional[MonthStringEnum] = None


class QuarterEnum(Enum):
    Q1 = 'Q1'
    Q2 = 'Q2'
    Q3 = 'Q3'
    Q4 = 'Q4'


class Quarter(RootModel[Optional[QuarterEnum]]):
    root: Optional[QuarterEnum] = None


class CaseCountAnalyticsByCaseFiledDate(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    groupedBy: GroupedBy
    monthInt: int
    monthString: MonthString
    object: constr(max_length=33)
    quarter: Quarter
    weekOfMonth: int
    weekOfYear: int
    year: int


class CaseCountAnalyticsByCaseFiledDateResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=41)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCaseFiledDate]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalCaseFiledDateCount: int = Field(
        ..., description='Total no. of Case File Date for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class Geo(BaseModel):
    latitude: constr(max_length=15)
    longitude: constr(max_length=15)


class CaseCountAnalyticsByNormAttorney(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    normAttorneyId: constr(min_length=17, max_length=18)
    normAttorneyName: constr(max_length=500)
    object: constr(max_length=32)


class CaseCountAnalyticsByNormAttorneyResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=40)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByNormAttorney]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalNormAttorneyCount: int = Field(
        ..., description='Total no. of NormAttorney for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByNormJudge(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    normJudgeId: constr(min_length=17, max_length=18)
    normJudgeName: constr(max_length=500)
    object: constr(max_length=29)


class CaseCountAnalyticsByNormJudgeResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=37)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByNormJudge]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalNormJudgeCount: int = Field(
        ..., description='Total no. of NormJudge for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByNormLawFirm(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    normLawFirmId: constr(min_length=17, max_length=18)
    normLawFirmName: constr(max_length=500)
    object: constr(max_length=31)


class CaseCountAnalyticsByNormLawFirmResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=39)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByNormLawFirm]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalNormLawFirmCount: int = Field(
        ..., description='Total no. of NormLawFirm for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByNormParty(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    normPartyId: constr(min_length=17, max_length=18)
    normPartyName: constr(max_length=500)
    object: constr(max_length=29)


class CaseCountAnalyticsByNormPartyResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=37)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByNormParty]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalNormPartyCount: int = Field(
        ..., description='Total no. of NormParty for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class EstimatedOrderDuration(Enum):
    estimateUnavailable = 'estimateUnavailable'
    withinMinutes = 'withinMinutes'
    withinHours = 'withinHours'
    withinDays = 'withinDays'
    withinWeeks = 'withinWeeks'


class SourceDataStatus1Enum(Enum):
    NO_LONGER_AVAILABLE_IN_COURT = 'NO_LONGER_AVAILABLE_IN_COURT'
    SOURCE_DEPRECATED = 'SOURCE_DEPRECATED'
    SEALED = 'SEALED'


class SourceDataStatus1(RootModel[Optional[SourceDataStatus1Enum]]):
    root: Optional[SourceDataStatus1Enum] = Field(
        None,
        description='The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.',
        examples=['SOURCE_DEPRECATED'],
    )


class Status1(Enum):
    COMPLETE = 'COMPLETE'
    FAILURE = 'FAILURE'
    IN_PROGRESS = 'IN_PROGRESS'


class CaseDocumentOrderPacerOptions(BaseModel):
    pacerClientCode: Optional[constr(min_length=0, max_length=32)] = Field(
        None,
        description='PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.',
        examples=['Test UniCourt API'],
    )
    pacerUserId: constr(min_length=6, max_length=40) = Field(
        ...,
        description='Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.',
        examples=['URKYwer3tyh5r56gq2'],
    )


class CaseDocumentOrderRequest(BaseModel):
    caseDocumentId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Document ID which you want to order.',
        examples=['CDOCcre989d654fa05'],
    )
    isPreviewOnly: bool = Field(
        ...,
        description='Flag value to determine if the document order is a preview order or no.',
        examples=[True],
    )
    pacerOptions: Optional[CaseDocumentOrderPacerOptions] = None


class CaseRelationshipType(BaseModel):
    caseRelationshipTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CRTPgkmnzpiBXstT3s']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Child Case'])
    object: constr(min_length=20, max_length=20) = Field(
        ..., examples=['CaseRelationshipType']
    )


class CaseRelationshipTypeResponse(BaseModel):
    caseRelationshipTypeArray: List[CaseRelationshipType] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=28, max_length=28) = Field(
        ..., examples=['CaseRelationshipTypeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CaseStats(BaseModel):
    allCaseDocumentCount: int = Field(
        ...,
        description='Count which includes the freeCaseDocumentCount and paidCaseDocumentCount.',
        examples=[379],
    )
    attorneyCount: int = Field(
        ...,
        description='Count of number of attornies available in the case being requested for.',
        examples=[232],
    )
    caseDocumentInLibraryCount: int = Field(
        ...,
        description='Count of number of documents that are available in the UniCourt CrowdSourced Library for the case being requested for.',
        examples=[13],
    )
    docketEntryCount: int = Field(
        ...,
        description='Count of number of docket entries available in the case being requested for.',
        examples=[8503],
    )
    freeCaseDocumentCount: int = Field(
        ...,
        description='Count of number of free documents available in the case being requested for.',
        examples=[254],
    )
    hearingCount: int = Field(
        ...,
        description='Count of number of hearings available in the case being requested for.',
        examples=[2],
    )
    judgeCount: int = Field(
        ...,
        description='Count of number of judges available in the case being requested for.',
        examples=[1],
    )
    object: constr(min_length=9, max_length=9) = Field(
        ..., description='Name of the object'
    )
    paidCaseDocumentCount: int = Field(
        ...,
        description='Count of number of paid documents available in the case being requested for.',
        examples=[125],
    )
    partyCount: int = Field(
        ...,
        description='Count of number of parties available in the case being requested for.',
        examples=[860],
    )
    relatedCaseCount: int = Field(
        ...,
        description='Count of related cases that are available in the case being requested.',
        examples=[1],
    )


class CaseStatus(BaseModel):
    caseClassArray: List[constr(min_length=1, max_length=255)] = Field(
        ..., examples=[['Civil', 'Criminal']]
    )
    caseStatusGroup: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Closed']
    )
    caseStatusGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CSSG6ERqyFdydo52WK']
    )
    caseStatusId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CSSTBtqf3R2LYFt4j4']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2021-11-25T10:17:38+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Dismissed'])
    object: constr(min_length=10, max_length=10) = Field(..., examples=['CaseStatus'])


class CaseStatusGroup(BaseModel):
    caseStatusGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CSSG6ERqyFdydo52WK']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2021-11-25T10:17:33+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Closed'])
    object: constr(min_length=15, max_length=15) = Field(
        ..., examples=['CaseStatusGroup']
    )


class CaseStatusGroupResponse(BaseModel):
    caseStatusGroupArray: List[CaseStatusGroup] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=23, max_length=23) = Field(
        ..., examples=['CaseStatusGroupResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CaseStatusResponse(BaseModel):
    caseStatusArray: List[CaseStatus] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CaseStatusResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CaseTimeline(BaseModel):
    firstCaseFiledDate: datetime = Field(
        ...,
        description='The first date when the two entities have appeared together in the case. (These dates are determined from case filed dates)',
    )
    lastCaseFiledDate: datetime = Field(
        ...,
        description='The last date when the two entities have appeared together in the case. (These dates are determined from case filed dates)',
    )
    object: constr(max_length=12)


class Type(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'


class CaseTrackSchedule(BaseModel):
    days: List[int] = Field(
        ...,
        description='[] -> if schedule type is daily <br>\n1-7 -> if schedule type is weekly <br>\n1-31 -> if schedule type is monthly\n',
        examples=[[1, 3, 5]],
    )
    type: Type = Field(..., examples=['weekly'])


class CaseType(BaseModel):
    areaOfLaw: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Tax and Revenue']
    )
    areaOfLawId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['AOFLGAd9Ah5qkTRNw9']
    )
    caseClass: constr(min_length=1, max_length=255) = Field(..., examples=['Civil'])
    caseClassId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CSCLNjbKTN7Yfo2wdb']
    )
    caseTypeGroup: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Tax and Revenue']
    )
    caseTypeGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CTYGSpWaVityBQndsv']
    )
    caseTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CTYPoLU7sWaGjWtkBx']
    )
    caseTypeTag: constr(min_length=1, max_length=255) = Field(..., examples=[None])
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Tax Claim'])
    object: constr(min_length=8, max_length=8) = Field(..., examples=['CaseType'])
    saliCode: constr(min_length=1, max_length=255) = Field(..., examples=['TAXR'])


class CaseTypeGroup(BaseModel):
    areaOfLaw: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Tax and Revenue']
    )
    areaOfLawId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['AOFLGAd9Ah5qkTRNw9']
    )
    caseClass: constr(min_length=1, max_length=255) = Field(..., examples=['Civil'])
    caseClassId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CSCLNjbKTN7Yfo2wdb']
    )
    caseTypeGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CTYGSpWaVityBQndsv']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Tax and Revenue']
    )
    object: constr(min_length=13, max_length=13) = Field(
        ..., examples=['CaseTypeGroup']
    )


class CaseTypeGroupResponse(BaseModel):
    caseTypeGroupArray: List[CaseTypeGroup] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=21, max_length=21) = Field(
        ..., examples=['CaseTypeGroupResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CaseTypeResponse(BaseModel):
    caseTypeArray: List[CaseType] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=16, max_length=16) = Field(
        ..., examples=['CaseTypeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class Page(Enum):
    associatedCases = 'associatedCases'
    caseSummary = 'caseSummary'
    listOfCreditors = 'listOfCreditors'


class AdditionalPageArrayItem(BaseModel):
    fetchIfOlderThanDays: Optional[conint(ge=0, le=100)] = Field(
        0,
        description='You can limit how often this page information is fetched to reduce your PACER fees.\n\nMin days is 0 and Max days is 100.\n\nExample:\n1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.\n2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.\n',
        examples=[30],
    )
    page: Optional[Page] = Field(None, examples=['caseSummary'])


class RefreshType(Enum):
    fetchNewDocketEntries = 'fetchNewDocketEntries'
    fetchAllDocketEntries = 'fetchAllDocketEntries'


class CaseUpdatePacerOptions(BaseModel):
    additionalPageArray: Optional[List[AdditionalPageArrayItem]] = Field(
        None,
        description='Currently this option is only applicable for Federal PACER cases. The default behavior of the Case Update is to fetch the Docket Report from PACER which includes the parties and attorneys too.\n\nHowever if you need to fetch information for other pages in PACER you will need to specify it here.\n- associatedCases:\n> This will fetch the Associated Cases page in PACER if available. This page consists of related cases especially applicable for Multi-District Litigation cases and Member Cases. Including this option will internally link all related cases in our system. Data from this page will be available via the Related Cases API.\n- caseSummary:\n> This will fetch the Case Summary page in PACER if available. This page consists of additional case info which is not present in the Docket Report page. Data from this page will be structured and available as response in the Case API’s ```additional_info``` field.\n- listOfCreditors:\n> This page will fetch the “List Of Creditors” page for PACER Bankruptcy cases of case type "bk". Note that this page cannot be extracted for Bankruptcy cases of case type "ap" (Adversary Proceedings). This page consists of the Creditor information like the name and address of the Creditors. Data from this page will be structured and available as response in the Case API.\n',
        examples=[
            [
                {'fetchIfOlderThanDays': 30, 'page': 'associatedCases'},
                {'fetchIfOlderThanDays': 15, 'page': 'caseSummary'},
                {'fetchIfOlderThanDays': 15, 'page': 'listOfCreditors'},
            ]
        ],
    )
    fetchParticipantsIfOlderThanDays: Optional[conint(ge=0, le=100)] = Field(
        0,
        description='**Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**\n\n**Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**\n\n**With this option you can choose when to fetch parties for case based on when was it last fetched.**\nYou can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.\n\nMin days is 0 and Max days is 100.\n\nExample:\n1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.\n2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.\n',
        examples=[30],
    )
    pacerClientCode: Optional[constr(min_length=0, max_length=32)] = Field(
        None,
        description='PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.',
        examples=['Test UniCourt API'],
    )
    pacerUserId: constr(min_length=6, max_length=40) = Field(
        ...,
        description='**Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**',
        examples=['URKYwer3tyh5r56gq2'],
    )
    refreshType: Optional[RefreshType] = Field(
        'fetchNewDocketEntries',
        description='This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.\n\nOnly one of the two values is allowed:\n-   fetchNewDocketEntries:\n    >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.\n-   fetchAllDocketEntries:\n    >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.\n',
        examples=['fetchNewDocketEntries'],
    )


class AdditionalPageArrayItem1(BaseModel):
    fetchIfOlderThanDays: Optional[conint(ge=0, le=100)] = Field(
        0,
        description='You can limit how often this page information is fetched to reduce your PACER fees.\n\nMin days is 0 and Max days is 100.\n\nExample:\n1.  Specifying a value of 0 ensures that this page is fetched from PACER for this case update irrespective of when the page was last fetched.\n2.  Specifying a value of 30 ensures that this page is fetched from PACER for this case update only if the last fetch was older than 30 days.\n',
        examples=[30],
    )
    page: Optional[Page] = Field(None, examples=['caseSummary'])


class CaseUpdatePacerOptionsResponse(BaseModel):
    additionalPageArray: List[AdditionalPageArrayItem1] = Field(
        ...,
        description='Currently this option is only applicable for Federal PACER cases. The default behavior of the Case Update is to fetch the Docket Report from PACER which includes the parties and attorneys too.\n\nHowever if you need to fetch information for other pages in PACER you will need to specify it here.\n- associatedCases:\n> This will fetch the Associated Cases page in PACER if available. This page consists of related cases especially applicable for Multi-District Litigation cases and Member Cases. Including this option will internally link all related cases in our system. Data from this page will be available via the Related Cases API.\n- caseSummary:\n> This will fetch the Case Summary page in PACER if available. This page consists of additional case info which is not present in the Docket Report page. Data from this page will be structured and available as response in the Case API’s ```additional_info``` field.\n- listOfCreditors:\n> This page will fetch the “List Of Creditors” page for PACER Bankruptcy cases of case type "bk". Note that this page cannot be extracted for Bankruptcy cases of case type "ap" (Adversary Proceedings). This page consists of the Creditor information like the name and address of the Creditors. Data from this page will be structured and available as response in the Case API.\n',
        examples=[
            [
                {'fetchIfOlderThanDays': 30, 'page': 'associatedCases'},
                {'fetchIfOlderThanDays': 15, 'page': 'caseSummary'},
                {'fetchIfOlderThanDays': 15, 'page': 'listOfCreditors'},
            ]
        ],
    )
    fetchParticipantsIfOlderThanDays: conint(ge=0, le=100) = Field(
        ...,
        description='**Currently this option is only applicable for Federal PACER cases. You can limit how often parties and attorneys for a PACER case are fetched to reduce your PACER fees. If you are tracking cases daily or hourly you could easily end up with a large PACER bill.**\n\n**Use Case: Cases are typically updated to check for new docket entry filings. However every update to PACER case costs money. Participants for a case change less often than docket entry filings. So fetching participants for every update might result in unnecessary PACER costs; especially on cases which have a lot of parties and attorneys. So instead of getting charged the minimum cost of $0.10 for an update which might have had few docket entries, you could end up spending $3 for every update because there were a lot of parties for that case that were also fetched.**\n\n**With this option you can choose when to fetch parties for case based on when was it last fetched.**\nYou can limit how often this participants are fetched in a PACER case to keep your PACER costs under control.\n\nMin days is 0 and Max days is 100.\n\nExample:\n1.  Specifying a value of 0 ensures that participants are fetched from PACER for this case update irrespective of when the participants were last fetched.\n2.  Specifying a value of 30 ensures that participants are fetched from PACER for this case update only if the last fetch was older than 30 days.\n',
        examples=[30],
    )
    object: constr(min_length=30, max_length=30) = Field(
        ...,
        description='Name of the object.',
        examples=['CaseUpdatePacerOptionsResponse'],
    )
    pacerClientCode: constr(min_length=0, max_length=32) = Field(
        ...,
        description='PACER Client Code. This is mandatory if your setting in PACER website is set to True for required client code.',
        examples=['Test UniCourt API'],
    )
    pacerUserId: constr(min_length=6, max_length=40) = Field(
        ...,
        description='**Your PACER credentials username. This is mandatory when a PACER Case is being requested in the API. For Non PACER cases this is not mandatory. Suppose your request consists of Non PACER and PACER Cases then this needs to be passed becuase you are requesting a PACER case too.**',
        examples=['URKYwer3tyh5r56gq2'],
    )
    refreshType: RefreshType = Field(
        ...,
        description='This flag determines whether to pull only new or pull all the docket entries for a PACER case being requested.\n\nOnly one of the two values is allowed:\n-   fetchNewDocketEntries:\n    >   Updates the PACER case with only new docket entries that have been added after the previous update of the case being requested.\n-   fetchAllDocketEntries:\n    >   Updates the PACER case by re-parsing all dockets from #1 till latest docket entry available.\n',
        examples=['fetchNewDocketEntries'],
    )


class CaseUpdateRequest(BaseModel):
    caseId: constr(min_length=18, max_length=18) = Field(
        ...,
        description="UniCourt's Case Id for update.",
        examples=['CASEhq9d8b72d0800c'],
    )
    pacerOptions: Optional[CaseUpdatePacerOptions] = None


class CauseOfAction(BaseModel):
    causeOfActionGroup: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Consumer Credit and Unfair Debt Collection Claims']
    )
    causeOfActionGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CAGPiHoKn66p3bkcNs']
    )
    causeOfActionId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CATNiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Fair Credit Reporting Claim']
    )
    object: constr(min_length=13, max_length=13) = Field(
        ..., examples=['CauseOfAction']
    )


class CauseOfActionAdditionalData(BaseModel):
    causeOfActionAdditionalDataId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CAADiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    object: constr(min_length=27, max_length=27) = Field(
        ..., examples=['CauseOfActionAdditionalData']
    )
    type: constr(min_length=1, max_length=255) = Field(..., examples=['ActName'])
    value: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Fair Credit Reporting Act']
    )


class CauseOfActionAdditionalDataResponse(BaseModel):
    causeOfActionAdditionalDataArray: List[CauseOfActionAdditionalData] = Field(
        ..., max_length=100
    )
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=35, max_length=35) = Field(
        ..., examples=['CauseOfActionAdditionalDataResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CauseOfActionGroup(BaseModel):
    causeOfActionGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CAGPiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Consumer Credit and Unfair Debt Collection Claims']
    )
    object: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CauseOfActionGroup']
    )


class CauseOfActionGroupResponse(BaseModel):
    causeOfActionGroupArray: List[CauseOfActionGroup] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=26, max_length=26) = Field(
        ..., examples=['CauseOfActionGroupResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CauseOfActionResponse(BaseModel):
    causeOfActionArray: List[CauseOfAction] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=21, max_length=21) = Field(
        ..., examples=['CauseOfActionResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class Charge(BaseModel):
    chargeGroup: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Burglary']
    )
    chargeGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CHGPiHoKn66p3bkcNs']
    )
    chargeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CHRGiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Assault Battery']
    )
    object: constr(min_length=6, max_length=6) = Field(..., examples=['Charge'])


class ChargeAdditionalData(BaseModel):
    chargeAdditionalDataId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CHADiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    object: constr(min_length=20, max_length=20) = Field(
        ..., examples=['ChargeAdditionalData']
    )
    type: constr(min_length=1, max_length=255) = Field(..., examples=['AgeModifier'])
    value: constr(min_length=1, max_length=255) = Field(..., examples=['Under 21'])


class ChargeAdditionalDataResponse(BaseModel):
    chargeAdditionalDataArray: List[ChargeAdditionalData] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=28, max_length=28) = Field(
        ..., examples=['ChargeAdditionalDataResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class ChargeDegree(BaseModel):
    chargeDegreeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CHDGiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Burglary'])
    object: constr(min_length=12, max_length=12) = Field(..., examples=['ChargeDegree'])


class ChargeDegreeResponse(BaseModel):
    chargeDegreeArray: List[ChargeDegree] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=20, max_length=20) = Field(
        ..., examples=['ChargeDegreeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class ChargeGroup(BaseModel):
    chargeGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CHGPiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Burglary'])
    object: constr(min_length=11, max_length=11) = Field(..., examples=['ChargeGroup'])


class ChargeGroupResponse(BaseModel):
    chargeGroupArray: List[ChargeGroup] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=19, max_length=19) = Field(
        ..., examples=['ChargeGroupResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class ChargeResponse(BaseModel):
    chargeArray: List[Charge] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=14, max_length=14) = Field(
        ..., examples=['ChargeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class ChargeSeverity(BaseModel):
    chargeSeverityId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CHSEiHoKn66p3bkcNs']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Burglary'])
    object: constr(min_length=14, max_length=14) = Field(
        ..., examples=['ChargeSeverity']
    )


class ChargeSeverityResponse(BaseModel):
    chargeSeverityArray: List[ChargeSeverity] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=22, max_length=22) = Field(
        ..., examples=['ChargeSeverityResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class Court(BaseModel):
    additionalLevels: AdditionalLevels
    appealCourtsForCourtAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/court/CORTV4vCEaKrhystBz/appealCourts'
        ],
    )
    container: constr(min_length=1, max_length=255) = Field(..., examples=[None])
    containerType: constr(min_length=1, max_length=255) = Field(..., examples=[None])
    courtId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CORTV4vCEaKrhystBz']
    )
    courtLocationsForCourtAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/court/CORTV4vCEaKrhystBz/courtLocations'
        ],
    )
    courtServiceStatusAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/courtServiceStatus?q=(Court%3A(courtId%3A%22CORTV4vCEaKrhystBz%22))'
        ],
    )
    courtSystemId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['COSYACHBdMewtaG5DY']
    )
    courtTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['COTPm8jjc2PAydpFhq']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    jurisdictionGeoForCourtAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/court/CORTV4vCEaKrhystBz/jurisdictionGeo'
        ],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Los Angeles County Superior Court']
    )
    nameAka: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Los Angeles County Superior Court of California']
    )
    object: constr(min_length=5, max_length=5) = Field(..., examples=['Court'])
    system: constr(min_length=1, max_length=255) = Field(
        ..., examples=['California Superior Courts']
    )
    type: constr(min_length=1, max_length=255) = Field(..., examples=['State'])


class CourtCoverage(BaseModel):
    caseClassCoverageArray: List[CaseClassCoverage]
    court: Court
    lastUpdateCountDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Date when it was last updated.',
        examples=['2020-08-05T17:32:28+00:00'],
    )
    object: constr(min_length=13, max_length=13) = Field(
        ..., description='Name of the object'
    )
    totalCaseCount: int = Field(
        ..., description='Total Cases for a specific court.', examples=[1480157]
    )
    totalCaseDocumentInLibraryCount: int = Field(
        ...,
        description='Count of total Case Documents added in UniCourt Library.',
        examples=[25466],
    )
    totalCaseDocumentInLibraryInLastThirtyDaysCount: int = Field(
        ...,
        description='Count of total Case Documents added in UniCourt Library in last 30 days',
        examples=[25466],
    )
    totalCasesInLastThirtyDaysCount: int = Field(
        ...,
        description='Total Cases in last 30 days that were added to UniCourt',
        examples=[8889],
    )
    totalFreeCaseDocumentCount: int = Field(
        ...,
        description='Total Free Case Documents for a specific court.',
        examples=[12545],
    )
    totalFreeCaseDocumentsInLastThirtyDaysCount: int = Field(
        ...,
        description='Total Free Case Documents in last 30 days that were added to UniCourt',
        examples=[125],
    )
    totalPaidCaseDocumentCount: int = Field(
        ...,
        description='Total Paid Case Documents for a specific court.',
        examples=[1480157],
    )
    totalPaidCaseDocumentsInLastThirtyDaysCount: int = Field(
        ...,
        description='Total Paid Case Documents in last 30 days that were added to UniCourt',
        examples=[25466],
    )


class CourtLocation(BaseModel):
    city: constr(max_length=100) = Field(..., description='City', examples=['SPOKANE'])
    courtLocationId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['COLOV75AKgqMqnfVhM']
    )
    courtServiceStatusAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/courtServiceStatus?q=(CourtLocation%3A(courtLocationId%3A%22COLOV75AKgqMqnfVhM%22))'
        ],
    )
    courtsForCourtLocationAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/courtLocation/COLOV75AKgqMqnfVhM/courts'
        ],
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Airport Courthouse']
    )
    object: constr(min_length=13, max_length=13) = Field(
        ..., examples=['CourtLocation']
    )
    stateName: constr(min_length=1, max_length=255) = Field(
        ...,
        description='State Name if present else default value.',
        examples=['NEW YORK'],
    )
    streetAddress1: constr(min_length=1, max_length=250) = Field(
        ...,
        description='1st part of the street address.',
        examples=['4407 N DIVISION ST'],
    )
    streetAddress2: constr(max_length=150) = Field(
        ..., description='2nd part of the street address.', examples=['STE 516']
    )


class CourtLocationResponse(BaseModel):
    courtLocationArray: List[CourtLocation] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=21, max_length=21) = Field(
        ..., examples=['CourtLocationResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CourtResponse(BaseModel):
    courtArray: List[Court] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=13, max_length=13) = Field(
        ..., examples=['CourtResponse']
    )
    pageNumber: int = Field(..., examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ...,
        description='The number of matches that were found in the index.',
        examples=[1],
    )
    totalPages: int = Field(
        ...,
        description='Total pages for matches that were found in the index.',
        examples=[1],
    )


class CourtSystem(BaseModel):
    courtSystemId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['COSYACHBdMewtaG5DY']
    )
    courtType: constr(min_length=1, max_length=255) = Field(..., examples=['State'])
    courtTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['COTPm8jjc2PAydpFhq']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['California Superior Courts']
    )
    object: constr(min_length=11, max_length=11) = Field(..., examples=['CourtSystem'])


class CourtSystemResponse(BaseModel):
    courtSystemArray: List[CourtSystem] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=19, max_length=19) = Field(
        ..., examples=['CourtSystemResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class CourtType(BaseModel):
    courtTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['COTPm8jjc2PAydpFhq']
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when the Court was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['State'])
    object: constr(min_length=9, max_length=9) = Field(..., examples=['CourtType'])


class CourtTypeResponse(BaseModel):
    courtTypeArray: List[CourtType] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=17, max_length=17) = Field(
        ..., examples=['CourtTypeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class DailyUsageResponse(BaseModel):
    apiCallsBillable: ApiCallsBillable = Field(
        ..., description='Total number of API calls billed for the billing cycle.'
    )
    apiCallsCredited: ApiCallsCredited = Field(
        ...,
        description='Total number of callbackFailures including caseUpdate, caseDocumentOrder and caseExport for the billing cycle.',
    )
    apiCallsMade: ApiCallsMade = Field(
        ..., description='Total API calls made for the billing cycle.'
    )
    apiUsage: Dict[str, Any] = Field(
        ..., description='StartDate and endDate of the billing cycle.'
    )
    object: constr(min_length=18, max_length=18) = Field(
        ..., description='Name of the object.', examples=['DailyUsageResponse']
    )
    usageEndTime: date_aliased = Field(
        ...,
        description='End time of the usage.',
        examples=['2022-11-10T23:59:59+00:00'],
    )
    usageStartTime: date_aliased = Field(
        ...,
        description='Start time of the usage.',
        examples=['2022-11-10T00:00:00+00:00'],
    )


class BoundaryEnum(Enum):
    first = 'first'
    last = 'last'
    single_docket_entry = 'single_docket_entry'


class Boundary(RootModel[Optional[BoundaryEnum]]):
    root: Optional[BoundaryEnum] = Field(
        None,
        description='Determines if it is the first docket entry or the last docket entry. This value will be set only for the first and last docket entry. For other docket entries it will be null. However, this will be set as single_docket_entry when the Case contains only one docket entry.',
        examples=['last'],
    )


class DocketBadge(Enum):
    DOCKET = 'DOCKET'
    CHARGE = 'CHARGE'
    HEARING = 'HEARING'
    JUDGEMENT = 'JUDGEMENT'
    FINANCIAL = 'FINANCIAL'
    DISPOSITION = 'DISPOSITION'
    SENTENCE = 'SENTENCE'
    BOND = 'BOND'
    BAIL = 'BAIL'
    CAUSE_OF_ACTION = 'CAUSE_OF_ACTION'
    ARREST = 'ARREST'
    WARRANT = 'WARRANT'
    SUMMON = 'SUMMON'
    TICKLER = 'TICKLER'
    OPINION = 'OPINION'


class DocumentDownload(BaseModel):
    caseDocumentDownloadAPI: AnyUrl = Field(
        ...,
        description='API call to download the document again if the above fileUrl is expired.',
        examples=[
            'https://enterpriseapi.unicourt.com/caseDocumentDownload/CDOCdgc9b0531de2a0'
        ],
    )
    caseDocumentId: constr(min_length=18, max_length=18) = Field(
        ..., description='Requested Document ID.', examples=['CDOCdgc9b0531de2a0']
    )
    expiryDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Expiry date-time for the fileUrl provided in this object.',
        examples=['2022-07-08T09:41:39+00:00'],
    )
    fileUrl: constr(min_length=1, max_length=1024) = Field(
        ...,
        description='Link to download the file.',
        examples=[
            'https://case_docs.s3.amazonaws.com/pc/db1/arwdce/CDOCdgc9b0531de2a0.pdf?Signature=iaDrqu3QdGn4Iiivj12HGE0Cd%2FU%3D&Expires=1519114632&AWSAccessKeyId=ASIAIVIPKMBFROMOG4UA&x-amz-security-token=FQoDYXdzEBAaDAFHPFrD90ZiDAXztiK3A5quX27wV0JyJ/MEZZC72CPlfmLYNblJvE9oW8nObvf1H5p%2Boj9Qsg0NQJ36qKmsV2IVFNtmqkoXufMqjpdb1S/p4rp6VPPk6fweYsqkVkjhHkkLesIq8XDAxlKSE9i9TUO8RaKl90c3RszzKhJCjkmLdKEFuwoPv1W1EDyJHsZ222TSnkOJfEJYcaVRhvNPQjSXkl%2BhwrX3Ft0Pzns1rGDtNMj6/2iRoE%2Blqqi4/uFNKbRMxaPS4xi9a7JcevwHPQhj8bVEZyIkZ35vQ4g2WFpImt1uafHPSuzE3WglbkO4yP7mP62P6qIl9xpYpYqzFLdecAkcz0ipBIJltfegTvITfxFMzlYHZimkOx9uJIGXKpD//VSc%2BW95/8JgcAPbGAdCXaxLOVbb1XPSxlO46irUaXFUSBHDy0rKuXdirRiIs583HQt2K6MvMBPzB7BbbE998V1sQsezHvvazdESDSVrjBstXrP23laQg7IiK5rbtGxYYqSEKOlaUd3eFIJwnfqYPVp%2Bl%2BWwORnbi96BtziNUABuccd3KepVMvth481k/xf12Fnakl/vS5A9ArOT7BjwY7q783Mok5Kv1AU%3D'
        ],
    )
    object: constr(min_length=16, max_length=16) = Field(
        ..., description='Name of the object.', examples=['DocumentDownload']
    )


class Email(BaseModel):
    emailId: constr(min_length=1, max_length=100) = Field(
        ..., description='email id', examples=['mike@smitch.com']
    )
    firstFetchDate: datetime = Field(
        ...,
        description='Date at which this record is created in UniCourt.',
        examples=['2017-07-21T17:32:28+00:00'],
    )
    isVisible: bool = Field(
        ...,
        description='Boolean indicating if the email is visible or not.',
        examples=[False],
    )
    lastFetchDate: datetime = Field(
        ...,
        description='Date at which this record was updated in UniCourt.',
        examples=['2017-07-21T17:32:28+00:00'],
    )
    object: constr(min_length=5, max_length=5) = Field(..., examples=['Email'])


class Exception(BaseModel):
    code: constr(min_length=1, max_length=75) = Field(
        ..., description='Indicates the type of error occured.'
    )
    details: constr(min_length=1, max_length=255) = Field(
        ..., description='Describes what went wrong.'
    )
    message: constr(min_length=1, max_length=255) = Field(
        ..., description='Indicates the error message that describes the error code.'
    )
    object: constr(min_length=9, max_length=9) = Field(..., examples=['Exception'])


class ExportFile(BaseModel):
    expiryDate: constr(min_length=10, max_length=40) = Field(
        ...,
        description='Expiry date-time for the fileUrl provided in this object.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    fileUrl: constr(min_length=1, max_length=2048) = Field(
        ...,
        description='Link to download the file.',
        examples=[
            'https://case_docs.s3.amazonaws.com/pc/db1/arwdce/CDOCvkpXZC8FzBAEz.pdf'
        ],
    )
    name: constr(min_length=1, max_length=255) = Field(
        ..., description='Name of the file.', examples=['CDOCvkpXZC8FzBAEz.pdf']
    )
    object: constr(min_length=10, max_length=10) = Field(..., examples=['ExportFile'])


class ExtractedFields(BaseModel):
    model_config = ConfigDict(
        extra='allow',
    )
    key: Optional[str] = Field(
        None,
        description='This can be an field that is extracted from rawOrderedDataArray on request of different users.',
    )


class InvalidateAccessTokenRequest(BaseModel):
    clientId: constr(min_length=32, max_length=32) = Field(
        ...,
        description='Your Client ID obtainable by logging into your UniCourt account.',
        examples=['G3cfixgetVzfaoszGOBp5LPGtih1nMJ9'],
    )
    clientSecret: constr(min_length=64, max_length=64) = Field(
        ...,
        description='Your Client Secret ID obtainable by logging into your UniCourt account.',
        examples=['u6PTti57IjPlrwU5MzOwLBD2MCwx-IEbo8sTStTivh1I-EqQ8Jcm27Gfo2GhpHCw'],
    )
    tokenId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='The Token ID of token being invalidated',
        examples=['TKID384a057WFC3Dp3'],
    )


class JudgeAnalyticsAPI(BaseModel):
    associatedNormAttorneysAPI: AnyUrl
    associatedNormLawFirmsAPI: AnyUrl
    associatedNormPartiesAPI: AnyUrl
    normJudgeAPI: AnyUrl = Field(..., description='Link to Details for the Judge.')
    object: constr(max_length=17)


class JudgeType(BaseModel):
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    judgeTypeId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['JGTPkwrfzkDJUvxpN9']
    )
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Judge'])
    object: constr(min_length=9, max_length=9) = Field(..., examples=['JudgeType'])


class JudgeTypeResponse(BaseModel):
    judgeTypeArray: List[JudgeType] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=17, max_length=17) = Field(
        ..., examples=['JudgeTypeResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class JurisdictionGeo(BaseModel):
    city: constr(min_length=1, max_length=255) = Field(..., examples=[None])
    country: constr(min_length=1, max_length=255) = Field(
        ..., examples=['United States of America']
    )
    county: constr(min_length=1, max_length=255) = Field(..., examples=['Los Angeles'])
    courtsForJurisdictionGeoAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/jurisdictionGeo/JUGO8Mep3ckEkD2SFk/courts?pageNumber=1'
        ],
    )
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    fipsCode: constr(min_length=1, max_length=255) = Field(..., examples=['06037'])
    jurisdictionGeoId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['JUGO8Mep3ckEkD2SFk']
    )
    object: constr(min_length=15, max_length=15) = Field(
        ..., examples=['JurisdictionGeo']
    )
    state: constr(min_length=1, max_length=255) = Field(..., examples=['California'])
    zipCodeArray: List[constr(min_length=1, max_length=255)] = Field(..., examples=[[]])


class JurisdictionGeoResponse(BaseModel):
    jurisdictionGeoArray: List[JurisdictionGeo] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=23, max_length=23) = Field(
        ..., examples=['JurisdictionGeoResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class LastTrackedDetails(BaseModel):
    lastTrackDate: datetime = Field(
        ...,
        description='The date and time when the case was tracked for this account.',
        examples=['2020-05-14T11:51:27+00:00'],
    )
    lastTrackException: Exception
    object: constr(min_length=18, max_length=18) = Field(
        ..., description='Name of the object.', examples=['LastTrackedDetails']
    )
    pacerOptions: CaseUpdatePacerOptionsResponse


class LawFirmAnalyticsAPI(BaseModel):
    associatedNormAttorneyAPI: AnyUrl
    associatedNormJudgeAPI: AnyUrl
    associatedNormPartiesAPI: AnyUrl
    caseCountAnalyticsByOpposingNormAttorneyAPI: AnyUrl
    caseCountAnalyticsByOpposingNormLawFirmAPI: AnyUrl
    caseCountAnalyticsByOpposingNormPartyAPI: AnyUrl
    normLawFirmAPI: AnyUrl = Field(..., description='Link to Details for the Law Firm.')
    object: constr(max_length=19)


class MatchedObject(BaseModel):
    highlightSnippet: constr(min_length=1, max_length=10000) = Field(
        ..., examples=['<b>CASEic46ed4faeb9b8</b>']
    )
    matchedObjectAPI: AnyUrl = Field(
        ..., examples=['https://enterpriseapi.unicourt.com/case/CASEic46ed4faeb9b8']
    )
    matchedObjectAttribute: constr(min_length=1, max_length=255) = Field(
        ..., examples=['caseId']
    )
    matchedObjectId: constr(min_length=17, max_length=18) = Field(
        ..., examples=['CASEic46ed4faeb9b8']
    )
    matchedObjectName: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Case']
    )
    object: constr(min_length=13, max_length=13) = Field(
        ..., examples=['MatchedObject']
    )


class NatureOfSuit(BaseModel):
    code: int = Field(
        ...,
        description='Nos Code from the source site which is extracted from the sourceText.',
        examples=[62],
    )
    name: constr(max_length=255) = Field(
        ...,
        description='Code Name from the source site which is extracted from the sourceText.',
        examples=['Dischargeability'],
    )
    object: constr(min_length=12, max_length=12) = Field(
        ..., description='Name of the object'
    )
    section: constr(max_length=255) = Field(
        ...,
        description='Section of a nos code extracted from the sourceText.',
        examples=['523(a)(2), false pretenses, false representation, actual fraud'],
    )
    sourceText: constr(max_length=500) = Field(
        ...,
        description='Source nos code data from the court site.',
        examples=[
            '62 Dischargeability - 523(a)(2), false pretenses, false representation, actual fraud'
        ],
    )


class NormAttorneySearchResult(BaseModel):
    firstFetchDate: datetime = Field(..., examples=['2020-04-25T10:42:46+00:00'])
    hasAssociatedPublicData: bool = Field(..., examples=[True])
    lastFetchDate: datetime = Field(..., examples=['2020-04-25T10:42:46+00:00'])
    matchedObjectArray: List[MatchedObject]
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['MARJOLEIN VAN DEN BOSCH-BROEREN']
    )
    normAttorneyDetailsAPI: AnyUrl = Field(
        ...,
        examples=['https://enterpriseapi.unicourt.com/normAttorney/NATYabUuTuEiuiRzc/'],
    )
    normAttorneyId: constr(min_length=17, max_length=18) = Field(
        ..., examples=['NATYabUuTuEiuiRzc']
    )
    object: constr(min_length=24, max_length=24) = Field(
        ..., examples=['NormAttorneySearchResult']
    )


class NormCorporateGroup(BaseModel):
    normCorporateGroupId: constr(min_length=18, max_length=18)
    normCorporateGroupName: constr(max_length=500)
    object: constr(max_length=18)


class AbaRatings(BaseModel):
    rating: constr(max_length=50) = Field(..., description='rating')
    year: int = Field(..., description='Year when Rating was recieved.')


class Bio(BaseModel):
    birthCity: constr(max_length=50) = Field(
        ..., description='The Birth City of the Judge.'
    )
    birthDate: datetime = Field(..., description='The Date of Birth of the Judge.')
    birthState: constr(max_length=50) = Field(
        ..., description='The Birth State of the Judge.'
    )
    deathCity: constr(max_length=50) = Field(
        ..., description='The Death City of the Judge.'
    )
    deathDate: datetime = Field(..., description='The Date of the Death of the Judge.')
    deathState: constr(max_length=50) = Field(
        ..., description='The Death State of the Judge.'
    )
    ethnicity: constr(max_length=50) = Field(
        ..., description='Ethnic Group of the Judge.'
    )
    politicalAffiliation: constr(max_length=50) = Field(
        ..., description='The Political Affiliation of the Judge.'
    )


class EducationArrayItem(BaseModel):
    degree: constr(max_length=250) = Field(
        ..., description='The Degree Awarded to the Judge'
    )
    school: constr(max_length=250) = Field(
        ..., description='The University which awarded the degree to the Judge.'
    )
    year: int = Field(..., description='The year when the degree was awarded.')


class Type1(Enum):
    Website = 'Website'
    Other = 'Other'


class JudicialSource(BaseModel):
    name: constr(max_length=500) = Field(
        ..., description='Name of the Judicial Data Source'
    )
    type: Type1 = Field(..., description='Type of acquisition of the data source')
    url: constr(max_length=150) = Field(
        ..., description='URL of the data source, if type is Website'
    )


class NameHistoryArrayItem(BaseModel):
    firstName: constr(max_length=500)
    isVisible: bool
    lastName: constr(max_length=500)
    middleName: constr(max_length=500)
    prefix: constr(max_length=5)
    suffix: constr(max_length=5)


class NormJudgeSearchResult(BaseModel):
    firstFetchDate: datetime = Field(..., examples=['2020-04-25T10:42:46+00:00'])
    lastFetchDate: datetime = Field(..., examples=['2020-04-25T10:42:46+00:00'])
    matchedObjectArray: List[MatchedObject]
    name: constr(min_length=1, max_length=255) = Field(..., examples=['JOHN MURHPY'])
    normJudgeDetailsAPI: AnyUrl = Field(
        ..., examples=['https://enterpriseapi.unicourt.com/normJudge/NJUDXnbhERCyKSaUj']
    )
    normJudgeId: constr(min_length=17, max_length=18) = Field(
        ..., examples=['NJUDXnbhERCyKSaUj']
    )
    object: constr(min_length=21, max_length=21) = Field(
        ..., examples=['NormJudgeSearchResult']
    )


class NormLawFirmSearchResult(BaseModel):
    firstFetchDate: datetime = Field(..., examples=['2020-04-25T10:42:46+00:00'])
    lastFetchDate: datetime = Field(..., examples=['2020-04-25T10:42:46+00:00'])
    matchedObjectArray: List[MatchedObject]
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['MIDLAND CREDIT MANAGEMENT, INC.']
    )
    normLawFirmDetailsAPI: AnyUrl = Field(
        ...,
        examples=['https://enterpriseapi.unicourt.com/normLawFirm/NORGgooQKwAYeRhcv/'],
    )
    normLawFirmId: constr(min_length=17, max_length=18) = Field(
        ..., examples=['NORGgooQKwAYeRhcv']
    )
    object: constr(min_length=23, max_length=23) = Field(
        ..., examples=['NormLawFirmSearchResult']
    )


class OrganizationType(Enum):
    Business = 'Business'
    GovernmentAgency = 'GovernmentAgency'


class TickerArrayItem(BaseModel):
    exchange: constr(max_length=250)
    symbols: List[constr(max_length=250)]


class IndividualData(BaseModel):
    firstName: constr(max_length=500)
    lastName: constr(max_length=500)
    middleName: constr(max_length=500)
    name: constr(max_length=500)


class PartyClassificationType(Enum):
    Individual = 'Individual'
    Organization = 'Organization'


class NormPartySearchResult(BaseModel):
    firstFetchDate: datetime = Field(..., examples=['2020-01-25T10:42:46+00:00'])
    lastFetchDate: datetime = Field(..., examples=['2020-04-25T08:42:46+00:00'])
    matchedObjectArray: List[MatchedObject]
    name: constr(min_length=1, max_length=255) = Field(..., examples=['JOHN SAUNDERS'])
    normPartyDetailsAPI: AnyUrl = Field(
        ...,
        examples=['https://enterpriseapi.unicourt.com/normParty/NORGSCPx3qNeJiqye/'],
    )
    normPartyId: constr(min_length=17, max_length=18) = Field(
        ..., examples=['NORGSCPx3qNeJiqye']
    )
    object: constr(min_length=21, max_length=21) = Field(
        ..., examples=['NormPartySearchResult']
    )
    partyClassificationType: constr(min_length=1, max_length=255) = Field(
        ..., examples=['BUSINESS']
    )


class PclJurisdictionType(Enum):
    Appellate = 'Appellate'
    Bankruptcy = 'Bankruptcy'
    Criminal = 'Criminal'
    Civil = 'Civil'
    Multi_district_Litigation = 'Multi-district Litigation'


class PACERCaseSearchContent(BaseModel):
    object: constr(min_length=22, max_length=22) = Field(
        ..., description='Name of the object'
    )
    pclBankruptcyChapter: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the bankruptcy chapter of the case when it is present',
        examples=['13'],
    )
    pclCaseId: int = Field(
        ...,
        description='Sequentially generated number that identifies the case.',
        examples=[12569],
    )
    pclCaseLink: constr(max_length=255) = Field(
        ...,
        description='Link to case in the case management/electronic case files (CM/ECF) system at the court.',
        examples=['https://ecf.jpml.uscourts.gov/cgi-bin/iqquerymenu.pl?375295'],
    )
    pclCaseNumber: int = Field(
        ..., description='The sequence number of the case.', examples=[96]
    )
    pclCaseNumberFull: constr(max_length=50) = Field(
        ..., description='Case Number.', examples=['1:2002cv00096']
    )
    pclCaseOffice: constr(max_length=2) = Field(
        ...,
        description='The divisional office in which the case was filed.',
        examples=['1'],
    )
    pclCaseTitle: constr(max_length=255) = Field(
        ..., description='Title of the case.', examples=['James Kelly v. Maria Poole']
    )
    pclCaseType: constr(max_length=6) = Field(
        ..., description='Code that identifies the type of case.', examples=['cv']
    )
    pclCaseYear: int = Field(
        ...,
        description='The year in which the case falls. Could be two or four digit.',
        examples=[2002],
    )
    pclCivilCtoNumber: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the civil cto number of the case when it is present',
        examples=['212'],
    )
    pclCivilDateDisposition: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the civil disposition date of the case when it is present',
        examples=['2002-05-13'],
    )
    pclCivilDateInitiated: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the civil initiated date of the case when it is present',
        examples=['2002-04-25'],
    )
    pclCivilDateTerminated: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the civil terminated date of the case when it is present',
        examples=['2010-05-10'],
    )
    pclCivilStatDisposition: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the civil stat disposition of the case when it is present',
        examples=['CTO Final'],
    )
    pclCivilStatInitiated: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the civil stat initiated of the case when it is present',
        examples=['CTO Filed'],
    )
    pclCivilStatTerminated: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the civil stat terminated of the case when it is present',
        examples=['Closed'],
    )
    pclCivilTransferee: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the civil transferee of the case when it is present',
        examples=['2006-69199'],
    )
    pclCourtId: constr(max_length=6) = Field(
        ...,
        description='The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B',
        examples=['jpmldc'],
    )
    pclDateDischarged: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the date discharged of the case when it is present',
        examples=['2006-06-10'],
    )
    pclDateDismissed: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the date dismissed of the case when it is present',
        examples=['2006-05-20'],
    )
    pclDateFiled: constr(max_length=10) = Field(
        ..., description='Filing date of the case.', examples=['2002-08-15']
    )
    pclDateReopened: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the date reopened of the case when it is present',
        examples=['2007-06-10'],
    )
    pclDateTermed: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the date termed of the case when it is present',
        examples=['2006-07-10'],
    )
    pclDisposition: constr(max_length=100) = Field(
        ...,
        description='This parameter represents the disposition of the case when it is present',
        examples=['Dismissed for failure to pay filing fee'],
    )
    pclDispositionMethod: constr(max_length=100) = Field(
        ...,
        description='This parameter represents the disposition method of the case when it is present',
        examples=['Dismissed for failure to pay filing fee'],
    )
    pclJointBankruptcyFlag: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the joint bankruptcy flag of the case when it is present',
        examples=['y'],
    )
    pclJointDischargedDate: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the joint discharged date of the case when it is present',
        examples=['2008-08-08'],
    )
    pclJointDismissedDate: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the joint dismissed date of the case when it is present',
        examples=['2008-08-08'],
    )
    pclJointDispositionMethod: constr(max_length=100) = Field(
        ...,
        description='This parameter represents the joint disposition method of the case when it is present',
        examples=['Hardship Discharge'],
    )
    pclJpmlNumber: int = Field(
        ..., description='JPML Case Seed number.', examples=[875]
    )
    pclJurisdictionType: PclJurisdictionType = Field(
        ...,
        description='Link to case in the case management/electronic case files (CM/ECF) system at the court.',
        examples=['Appellate'],
    )
    pclMdlCourtId: constr(max_length=10) = Field(
        ..., description='Which court does this mdl belongs too.', examples=['mssdce']
    )
    pclMdlDateOrdered: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the mdl date ordered of the case when it is present',
        examples=['2002-08-15'],
    )
    pclMdlDateReceived: constr(max_length=10) = Field(
        ...,
        description='This parameter represents the mdl date received of the case when it is present',
        examples=['2002-08-15'],
    )
    pclMdlExtension: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the mdl extension of the case when it is present',
    )
    pclMdlJudgeLastName: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the mdl judge lastname of the case when it is present',
    )
    pclMdlLittype: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the mdl lit type of the case when it is present',
    )
    pclMdlStatus: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the mdl status of the case when it is present',
    )
    pclMdlTransferee: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the mdl transferee of the case when it is present',
    )
    pclMdlTransfereeDistrict: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the mdl transferee district of the case when it is present',
    )
    pclNatureOfSuit: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the nature of suit of the case when it is present',
        examples=['360'],
    )


class PACERPartySearchContent(BaseModel):
    object: constr(min_length=23, max_length=23) = Field(
        ..., description='Name of the object'
    )
    pclCaseId: int = Field(
        ...,
        description='Sequentially generated number that identifies the case.',
        examples=[12569],
    )
    pclCaseNumber: int = Field(
        ..., description='The sequence number of the case.', examples=[96]
    )
    pclCaseNumberFull: constr(max_length=50) = Field(
        ..., description='Case Number.', examples=['1:2002cv00096']
    )
    pclCaseOffice: constr(max_length=2) = Field(
        ...,
        description='The divisional office in which the case was filed.',
        examples=['1'],
    )
    pclCaseTitle: constr(max_length=255) = Field(
        ..., description='Title of the case.', examples=['James Kelly v. Maria Poole']
    )
    pclCaseType: constr(max_length=6) = Field(
        ..., description='Code that identifies the type of case.', examples=['cv']
    )
    pclCaseYear: int = Field(
        ...,
        description='The year in which the case falls. Could be two or four digit.',
        examples=[2002],
    )
    pclCourtCase: PACERCaseSearchContent
    pclCourtId: constr(max_length=6) = Field(
        ...,
        description='The general geographical region or specific court district. The court ID is the abbreviation of the court location combined with the court type (dc or bk). Please refer the Appendix B',
        examples=['jpmldc'],
    )
    pclDateFiled: constr(max_length=10) = Field(
        ..., description='Filing date of the case.', examples=['2002-08-15']
    )
    pclFirstName: constr(max_length=255) = Field(
        ...,
        description='This parameter represents the first name of the case when it is present',
        examples=['William'],
    )
    pclGeneration: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the generation of the case when it is present',
        examples=['jr'],
    )
    pclJurisdictionType: PclJurisdictionType = Field(
        ...,
        description='Link to case in the case management/electronic case files (CM/ECF) system at the court.',
        examples=['Appellate'],
    )
    pclLastName: constr(max_length=255) = Field(
        ...,
        description='This parameter represents the last name of the case when it is present',
        examples=['Smith'],
    )
    pclMiddleName: constr(max_length=255) = Field(
        ...,
        description='This parameter represents the middle name of the case when it is present',
        examples=['Steven'],
    )
    pclPartyRole: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the party role of the case when it is present',
        examples=['dft'],
    )
    pclPartyType: constr(max_length=50) = Field(
        ...,
        description='This parameter represents the party type of the case when it is present',
        examples=['pty'],
    )


class PACERSearchPageInfo(BaseModel):
    first: bool = Field(
        ...,
        description='Indicates if the current page is the first page.',
        examples=[True],
    )
    last: bool = Field(
        ...,
        description='Indicates if the current page is the last page.',
        examples=[True],
    )
    number: int = Field(..., description='Current Page number.', examples=[2])
    numberOfElements: int = Field(
        ..., description='Number of records returned.', examples=[54]
    )
    object: constr(min_length=19, max_length=19) = Field(
        ..., description='Name of the object'
    )
    size: int = Field(
        ..., description='Number of results obtained in a page..', examples=[54]
    )
    totalElements: int = Field(
        ..., description='Total number of records available', examples=[487]
    )
    totalPages: int = Field(
        ..., description='Total pages of data available.', examples=[1]
    )


class PACERSearchReceipt(BaseModel):
    billablePages: int = Field(
        ...,
        description='No of pages that was billed for the given PACER search.',
        examples=[1],
    )
    clientCode: constr(max_length=100) = Field(
        ..., description='client code added if any was set.', examples=['964758']
    )
    csoId: int = Field(..., description='PACER Account ID.', examples=[4696152])
    description: constr(max_length=100) = Field(
        ...,
        description='Description of the search made.',
        examples=['Multi-district Litigation Party Search'],
    )
    firmId: constr(max_length=100) = Field(
        ..., description='Firm ID.', examples=['964758']
    )
    loginId: constr(max_length=40) = Field(
        ..., description='ID which is used for PACER login.', examples=['johnSmith']
    )
    object: constr(min_length=18, max_length=18) = Field(
        ..., description='Name of the object'
    )
    reportId: constr(max_length=100) = Field(
        ...,
        description='Report ID for the search made.',
        examples=['32d75b38-76c4-4f85-a1be-df742c578bec'],
    )
    search: constr(max_length=255) = Field(
        ...,
        description='Details of the search made for this request.',
        examples=['All Courts; Name Smith, William; Jurisdiction MDL; Page: 1'],
    )
    searchFee: constr(min_length=3, max_length=5) = Field(
        ..., description='PACER Search Fee.', examples=['.10']
    )
    transactionDate: datetime = Field(
        ...,
        description='Date when the transaction was made at the pacer court site.',
        examples=['2022-09-04T21:33:21-05:00'],
    )


class PacerCredential(BaseModel):
    defaultPacerClientCode: constr(min_length=0, max_length=32) = Field(
        ..., description='Pacer Client Code.', examples=['Test UniCourt API']
    )
    object: constr(min_length=15, max_length=15) = Field(
        ..., description='Name of the object.', examples=['PacerCredential']
    )
    pacerUserId: constr(min_length=6, max_length=40) = Field(
        ..., description='Pacer User Id.', examples=['URKYwer3tyh5r56gq2']
    )


class PacerCredentialListResponse(BaseModel):
    nextPageAPI: AnyUrl = Field(
        ..., description='Link for the next page.', examples=[None]
    )
    object: constr(min_length=27, max_length=27) = Field(
        ..., description='Name of the object.', examples=['PacerCredentialListResponse']
    )
    pacerCredentialArray: List[PacerCredential] = Field(
        ..., description='Array of pacer credentials.', max_length=100, min_length=0
    )
    pageNumber: int = Field(..., description='Current page number.', examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link for the previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of pacer credentials available.', examples=[1]
    )
    totalPages: int = Field(
        ..., description='Total number of pages available.', examples=[1]
    )


class PacerCredentialRequest(BaseModel):
    defaultPacerClientCode: Optional[constr(min_length=0, max_length=32)] = Field(
        None, description='Pacer Client Code.', examples=['Test UniCourt API']
    )
    pacerUserId: constr(min_length=6, max_length=40) = Field(
        ..., description='Pacer User Id.', examples=['URKYwer3tyh5r56gq2']
    )
    password: constr(min_length=8, max_length=45) = Field(
        ..., description='Password.', examples=['your password']
    )


class PartyClassificationType1(Enum):
    INDIVIDUAL = 'INDIVIDUAL'
    COMPANY = 'COMPANY'
    OTHER = 'OTHER'


class PartyAnalyticsAPI(BaseModel):
    associatedNormAttorneysAPI: AnyUrl
    associatedNormJudgesAPI: AnyUrl
    associatedNormLawFirmsAPI: AnyUrl
    caseCountAnalyticsByOpposingNormAttorneyAPI: AnyUrl
    caseCountAnalyticsByOpposingNormLawFirmAPI: AnyUrl
    caseCountAnalyticsByOpposingNormPartyAPI: AnyUrl
    normPartyAPI: AnyUrl = Field(..., description='Link to Details for the Party.')
    object: constr(max_length=17)


class PartyAttorneyAssociation(BaseModel):
    attorneyId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.',
        examples=['ATTYgu01be2e4de654'],
    )
    isVisible: bool = Field(
        ...,
        description='Signifies if this party attorney relationship is currently isVisible or not for the case.',
        examples=[True],
    )
    object: constr(min_length=24, max_length=24) = Field(
        ..., description='Name of the object'
    )
    partyAttorneyAssociationId: constr(min_length=18, max_length=18) = Field(
        ..., description='ID of the association', examples=['PATMguccbcb5acb4a7']
    )
    partyId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='ID for the party in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.',
        examples=['PRTYgu537f3901f406'],
    )


class PartyAttorneyAssociations(BaseModel):
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=25, max_length=25) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    partyAttorneyAssociationArray: List[PartyAttorneyAssociation] = Field(
        ..., max_length=25
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class PartyRole(BaseModel):
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    description: constr(min_length=1, max_length=255) = Field(..., examples=[None])
    name: constr(min_length=1, max_length=255) = Field(..., examples=['Plaintiff'])
    object: constr(min_length=9, max_length=9) = Field(..., examples=['PartyRole'])
    partyRoleGroup: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Party Offensive']
    )
    partyRoleGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['PTYGBnjxbx6tKNfVEP']
    )
    partyRoleId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['PTYRiP8nMgPxBsPc5i']
    )


class PartyRoleGroup(BaseModel):
    createdDate: datetime = Field(
        ...,
        description='The date and time when it was first created. This date and time is in UTC. Formatted as YYYY-MM-DD HH:MM:SS.',
        examples=['2020-05-07T10:17:56+00:00'],
    )
    description: constr(min_length=1, max_length=255) = Field(..., examples=[None])
    name: constr(min_length=1, max_length=255) = Field(
        ..., examples=['Party Offensive']
    )
    object: constr(min_length=14, max_length=14) = Field(
        ..., examples=['PartyRoleGroup']
    )
    partyRoleGroupId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['PTYGBnjxbx6tKNfVEP']
    )


class PartyRoleGroupResponse(BaseModel):
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=22, max_length=22) = Field(
        ..., examples=['PartyRoleGroupResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    partyRoleGroupArray: List[PartyRoleGroup] = Field(..., max_length=100)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class PartyRoleResponse(BaseModel):
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=17, max_length=17) = Field(
        ..., examples=['PartyRoleResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    partyRoleArray: List[PartyRole] = Field(..., max_length=100)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class PhoneType(Enum):
    DEFAULT = 'DEFAULT'
    OFFICE = 'OFFICE'
    FAX = 'FAX'
    PHONE = 'PHONE'


class Phone(BaseModel):
    firstFetchDate: datetime = Field(
        ...,
        description='Date at which this record is created in UniCourt.',
        examples=['2017-07-21T17:32:28+00:00'],
    )
    isVisible: bool = Field(
        ...,
        description='Boolean indicating if the phone is visible or not.',
        examples=[False],
    )
    lastFetchDate: datetime = Field(
        ...,
        description='Date at which this record was updated in UniCourt.',
        examples=['2017-07-21T17:32:28+00:00'],
    )
    object: constr(min_length=5, max_length=5) = Field(..., examples=['Phone'])
    phoneNumber: constr(min_length=1, max_length=30) = Field(
        ..., description='Phone Number', examples=['(123) 42344424']
    )
    phoneType: PhoneType = Field(
        ...,
        description='Resolved phone type (ideally from master data).',
        examples=['OFFICE'],
    )


class Address1(Enum):
    Matched = 'Matched'
    Mismatched = 'Mismatched'
    Not_Provided_By_Data_Source = 'Not_Provided_By_Data_Source'


class BarId(Enum):
    Matched = 'Matched'
    Mismatched = 'Mismatched'
    Not_Provided_By_Data_Source = 'Not_Provided_By_Data_Source'


class Email1(Enum):
    Matched = 'Matched'
    Mismatched = 'Mismatched'
    Not_Provided_By_Data_Source = 'Not_Provided_By_Data_Source'


class LawFirm(Enum):
    Matched = 'Matched'
    Mismatched = 'Mismatched'
    Not_Provided_By_Data_Source = 'Not_Provided_By_Data_Source'


class Phone1(Enum):
    Matched = 'Matched'
    Mismatched = 'Mismatched'
    Not_Provided_By_Data_Source = 'Not_Provided_By_Data_Source'


class ScoreConstituents(BaseModel):
    address: Address1
    barId: BarId
    email: Email1
    lawFirm: LawFirm
    nameSimilarityScore: float
    otherPotentialNormAttorneys: int
    phone: Phone1


class PossibleNormAttorney(BaseModel):
    associatedNormJudgesAPI: AnyUrl
    associatedNormLawFirmsAPI: AnyUrl
    associatedNormPartiesAPI: AnyUrl
    bestMatch: bool
    caseCountAnalyticsByNormAttorneyAPI: AnyUrl
    caseCountAnalyticsByOpposingNormAttorneyAPI: AnyUrl
    confidenceScore: float
    normAttorneyAPI: AnyUrl
    normAttorneyId: constr(min_length=18, max_length=18)
    normAttorneyName: constr(max_length=500)
    object: constr(min_length=20, max_length=20) = Field(
        ..., description='Name of the object'
    )
    scoreConstituents: ScoreConstituents


class ScoreConstituents1(BaseModel):
    address: Address1
    email: Email1
    nameSimilarityScore: float
    otherPotentialNormJudges: int
    phone: Phone1


class PossibleNormJudge(BaseModel):
    associatedNormAttorneysAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/normJudge/NATY2LJwigb5HFRir/associatedNormAttorneys?pageNumber=1'
        ],
    )
    associatedNormLawFirmsAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/normJudge/NATY2LJwigb5HFRir/associatedNormLawFirms?pageNumber=1'
        ],
    )
    associatedNormPartiesAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/normJudge/NATY2LJwigb5HFRir/associatedNormParties?pageNumber=1'
        ],
    )
    bestMatch: bool
    caseCountAnalyticsByNormJudgeAPI: AnyUrl
    confidenceScore: float
    normJudgeAPI: AnyUrl = Field(
        ...,
        description='Link to Details For the Judge.',
        examples=['https://enterpriseapi.unicourt.com/normJudge/NJUD3Ygn4ooAvNxAmd'],
    )
    normJudgeId: constr(min_length=18, max_length=18)
    normJudgeName: constr(max_length=500)
    object: constr(min_length=17, max_length=17) = Field(
        ..., description='Name of the object'
    )
    scoreConstituents: ScoreConstituents1


class SecretaryOfStateId(Enum):
    Matched = 'Matched'
    Mismatched = 'Mismatched'
    Not_Provided_By_Data_Source = 'Not_Provided_By_Data_Source'


class ScoreConstituents2(BaseModel):
    address: Address1
    email: Email1
    nameSimilarityScore: float
    otherPotentialNormLawFirms: int
    phone: Phone1
    secretaryOfStateId: SecretaryOfStateId


class Source(Enum):
    Case_Attorney_Linked_In_Other_Cases = 'Case_Attorney_Linked_In_Other_Cases'
    Case_Attorney_Field_Contains_Law_Firm = 'Case_Attorney_Field_Contains_Law_Firm'


class SourceDetails(BaseModel):
    linkedNormAttorneyIdArray: List[constr(min_length=18, max_length=18)]
    source: Source


class PossibleNormLawFirm(BaseModel):
    associatedNormAttorneyAPI: AnyUrl
    associatedNormJudgeAPI: AnyUrl
    associatedNormPartiesAPI: AnyUrl
    bestMatch: bool
    caseCountAnalyticsByNormLawFirmAPI: AnyUrl
    caseCountAnalyticsByOpposingNormLawFirmAPI: AnyUrl
    confidenceScore: float
    normLawFirmAPI: AnyUrl
    normLawFirmId: constr(min_length=18, max_length=18)
    normLawFirmName: constr(max_length=500)
    object: constr(min_length=19, max_length=19) = Field(
        ..., description='Name of the object'
    )
    scoreConstituents: ScoreConstituents2
    sourceDetails: SourceDetails


class ScoreConstituents3(BaseModel):
    address: Address1
    email: Email1
    nameSimilarityScore: float
    otherPotentialNormParties: int
    phone: Phone1
    secretaryOfStateId: SecretaryOfStateId


class PossibleNormParty(BaseModel):
    associatedNormAttorneysAPI: constr(max_length=255) = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/associatedNormAttorneys?pageNumber=1'
        ],
    )
    associatedNormJudgesAPI: constr(max_length=255) = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/associatedNormJudges?pageNumber=1'
        ],
    )
    associatedNormLawFirmsAPI: constr(max_length=255) = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/associatedNormLawFirms?pageNumber=1'
        ],
    )
    bestMatch: bool
    caseCountAnalyticsByNormPartyAPI: AnyUrl
    caseCountAnalyticsByOpposingNormPartyAPI: constr(max_length=255) = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAm2/caseCountAnalyticsByOpposingNormParty?pageNumber=1'
        ],
    )
    confidenceScore: float
    normPartyAPI: constr(max_length=255) = Field(
        ...,
        description='Link to Details For the Party.',
        examples=['https://enterpriseapi.unicourt.com/normParty/NPTY3Ygn4ooAvNxAmd'],
    )
    normPartyId: constr(min_length=18, max_length=18)
    normPartyName: constr(max_length=500)
    object: constr(min_length=17, max_length=17) = Field(
        ..., description='Name of the object'
    )
    scoreConstituents: ScoreConstituents3


class PreviewDocument(BaseModel):
    addedToLibraryDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Date and time when the preview document was downloaded and added to the UniCourt CrowdSourced Library.',
        examples=['2018-02-16T11:43:56+00:00'],
    )
    downloadAPI: constr(max_length=255) = Field(
        ...,
        description='Link to get the file url for the preview document which is already present in the UniCourt CrowdSourced Library.',
        examples=[
            'https://enterpriseapi.unicourt.com/caseDocument/CDOC3Ygn4oovIn33T/download/?isPreviewDocument=true'
        ],
    )
    inLibrary: bool = Field(
        ...,
        description='Determines if the preview document is present in the UniCourt Library or not.',
        examples=[True],
    )
    object: constr(min_length=15, max_length=15) = Field(
        ..., description='Name of the object'
    )


class ChildArrayItem(BaseModel):
    childArray: List[Dict[str, Any]]
    lbl: constr(max_length=500) = Field(
        ..., description='Label of the docket from the source.', examples=['name']
    )
    ord: int = Field(..., description='Structure order.', examples=[0])
    val: constr(max_length=1000000) = Field(
        ..., description='List of available addresses.', examples=['Proietti, Donald']
    )


class RawOrderedDataChild(BaseModel):
    childArray: List[ChildArrayItem] = Field(
        ...,
        description='Any docket text that belongs to the main docket text is added in the child.',
    )
    lbl: constr(max_length=255) = Field(
        ..., description='Label of the docket from the source.', examples=['']
    )
    ord: int = Field(..., description='Structure order.', examples=[0])
    val: constr(max_length=100000) = Field(
        ..., description='List of available addresses.', examples=['Proietti, Donald']
    )


class ReferencedDocketNumber(BaseModel):
    docketEntriesAPI: constr(max_length=255) = Field(
        ...,
        description='Link to Docket Entries API with the current docket number. The response of this API will give all the primary documents and secondary documents that are associated to it.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/docketEntries?docketNumber=172'
        ],
    )
    docketNumber: int = Field(
        ..., description='Each referenced docket number', examples=[172]
    )
    object: constr(min_length=22, max_length=22) = Field(
        ..., description='Name of the object'
    )


class RelationshipType(Enum):
    Parent = 'Parent'
    Child = 'Child'
    Same_Corporate_Group = 'Same_Corporate_Group'


class RelatedNormParty(BaseModel):
    normPartyId: constr(min_length=18, max_length=18)
    object: constr(max_length=16)
    relationshipType: RelationshipType


class RelationshipType1(Enum):
    Parent = 'Parent'
    Child = 'Child'


class SOSAssociatedNormOrganization(BaseModel):
    fromDate: datetime
    name: constr(max_length=500)
    normOrganizationAPI: AnyUrl
    normOrganizationId: constr(min_length=17, max_length=18)
    object: constr(max_length=29)
    relationshipType: RelationshipType1
    toDate: datetime


class Status5(Enum):
    Active = 'Active'


class SOSDataPreview(BaseModel):
    object: constr(max_length=14)
    sosNumber: constr(max_length=250)
    stateCode: constr(max_length=2)


class SOSNameChange(BaseModel):
    fromDate: datetime
    name: constr(max_length=500)
    object: constr(max_length=13)
    toDate: datetime


class Type2(Enum):
    daily = 'daily'
    weekly = 'weekly'
    monthly = 'monthly'


class Schedule(BaseModel):
    days: List[int] = Field(
        ...,
        description='[] -> if schedule type is daily <br>\n1-7 -> if schedule type is weekly <br>\n1-31 -> if schedule type is monthly\n',
        examples=[[1, 3, 5]],
    )
    object: constr(min_length=8, max_length=8) = Field(
        ..., description='Name of the object.', examples=['Schedule']
    )
    type: Type2 = Field(..., examples=['weekly'])


class ServiceHistory(BaseModel):
    appointedBy: constr(max_length=100) = Field(
        ..., description='The President-in-charge of the Judges appointment.'
    )
    fromDate: datetime = Field(
        ...,
        description='The year in which the Judge began practicing in his current service.',
    )
    fromYear: int = Field(
        ...,
        description='The year in which the Judge began practicing in his current service.',
    )
    isVisible: bool = Field(
        ..., description='Boolean indicating if the service history  is visible or not.'
    )
    object: constr(max_length=14)
    reasonForTermination: constr(max_length=50) = Field(
        ...,
        description='The reason for the Judges termination for the current position.',
    )
    sourceCourt: constr(max_length=250) = Field(
        ...,
        description='The court served by the Judge. The court is taken from source.',
    )
    title: constr(max_length=50) = Field(..., description='Title held by the Judge.')
    toDate: datetime = Field(
        ...,
        description='The year in which the Judge stoped practicing in his current service.',
    )
    toYear: int = Field(
        ...,
        description='The year in which the Judge stoped practicing in his current service.',
    )


class ServiceDetails(Enum):
    acceptingCaseUpdates = 'acceptingCaseUpdates'
    notAcceptingCaseUpdates = 'notAcceptingCaseUpdates'
    acceptingCaseTrack = 'acceptingCaseTrack'
    notAcceptingCaseTrack = 'notAcceptingCaseTrack'
    acceptingAutoDocOrders = 'acceptingAutoDocOrders'
    acceptingManualDocOrders = 'acceptingManualDocOrders'
    notAcceptingAutoDocOrdersLimitExceeded = 'notAcceptingAutoDocOrdersLimitExceeded'
    notAcceptingManualDocOrdersLimitExceeded = (
        'notAcceptingManualDocOrdersLimitExceeded'
    )
    notAcceptingDocOrders = 'notAcceptingDocOrders'


class Reason(Enum):
    underMaintenance = 'underMaintenance'
    notIntegrated = 'notIntegrated'
    brokenIntegration = 'brokenIntegration'
    sourceMigrated = 'sourceMigrated'


class ServiceStatusDownDetails(BaseModel):
    details: constr(max_length=1000) = Field(
        ...,
        description='Details of the reason.',
        examples=[
            'The integration is broken due to changes in the structure of Case Detail page in the court site.'
        ],
    )
    eta: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Estimated Time this Service could be Up again for the use.',
        examples=['2020-08-05T17:32:28+00:00'],
    )
    object: constr(min_length=24, max_length=24) = Field(
        ..., description='Name of the object'
    )
    reason: Reason = Field(
        ...,
        description='This field determines the reason behind status being down. Following are the possible reason for the service to be down:\n\n\tunderMaintenance: It means that the site is under scheduled maintenance.\n\n\tnotIntegrated: When an court with specific case type is not integrated in UniCourt.\n\n\tbrokenIntegration: Due to some updates made to the court site our existing Integration has broken and will require a fix to be made to support this court again for a spcific case type category.\n\n\tsourceMigrated: When a source is migrated from one site to another for a specific case type category.',
        examples=['brokenIntegration'],
    )


class SimilarNormAttorney(BaseModel):
    barRecordPreviewArray: List[BarRecordPreview]
    name: constr(min_length=1, max_length=500)
    normAttorneyAPI: AnyUrl
    normAttorneyId: constr(min_length=18, max_length=18)
    normAttorneySimilarityScore: float
    object: constr(min_length=19, max_length=19)


class SourceCauseOfAction(BaseModel):
    firstFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When this Cause of Action was first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    isVisible: bool = Field(
        ...,
        description='Signifies if the cause of action is currently isVisible or not for the case.',
        examples=[True],
    )
    lastFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When this Cause of Action was last fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    object: constr(min_length=19, max_length=19) = Field(
        ..., description='Name of the object'
    )
    sourceCauseOfAction: constr(max_length=250) = Field(
        ...,
        description='Cause of Action data from the source site.',
        examples=['Trademark Infringement'],
    )
    sourceCauseOfActionRaw: constr(max_length=500) = Field(
        ...,
        description='Raw Cause of Action data from the source site.',
        examples=['15:44 Trademark Infringement'],
    )
    sourceStatute: constr(max_length=250) = Field(
        ..., description='Statute of a Cause of Action.', examples=['15:44']
    )


class SourceChargeAdditionalData(BaseModel):
    object: constr(min_length=26, max_length=26) = Field(
        ..., description='Name of the object'
    )
    type: constr(max_length=255) = Field(
        ..., description='Describes what type of additional data.'
    )
    value: constr(max_length=255) = Field(..., description='Value of additional data.')


class Success(BaseModel):
    message: constr(min_length=1, max_length=255) = Field(
        ..., description='A message indicating that the request was successful.'
    )
    object: constr(min_length=7, max_length=7) = Field(..., examples=['Success'])


class Status6(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETE = 'COMPLETE'
    FAILURE = 'FAILURE'


class SortBy(Enum):
    latest_to_oldest = 'latest to oldest'
    oldest_to_latest = 'oldest to latest'


class GroupBy(Enum):
    Yearly = 'Yearly'
    Quarterly = 'Quarterly'
    Monthly = 'Monthly'
    Weekly = 'Weekly'


class CaseDocumentDownloadCaseDocumentIdGetResponse(
    RootModel[Union[DocumentDownload, Exception]]
):
    root: Union[DocumentDownload, Exception]


class Sort(Enum):
    filedDate = 'filedDate'
    relevancy = 'relevancy'


class Order(Enum):
    asc = 'asc'
    desc = 'desc'


class Sort2(Enum):
    name = 'name'


class Sort42(Enum):
    state = 'state'


class Sort44(Enum):
    name = 'name'


class Sort56(Enum):
    state = 'state'


class Sort58(Enum):
    name = 'name'


class CaseStatus1(Enum):
    open = 'open'
    closed = 'closed'


class CaseTypeArray(RootModel[List[constr(max_length=255)]]):
    root: List[constr(max_length=255)]


class CourtRegionIdArray(RootModel[List[constr(max_length=255)]]):
    root: List[constr(max_length=255)]


class NatureOfSuitsArray(RootModel[List[constr(max_length=255)]]):
    root: List[constr(max_length=255)]


class FederalBankruptcyChapterArray(RootModel[List[constr(max_length=255)]]):
    root: List[constr(max_length=255)]


class PartyRoleArray(RootModel[List[constr(max_length=50)]]):
    root: List[constr(max_length=50)]


class AccessTokenIdListResponse(BaseModel):
    AccessTokenIdArray: List[AccessTokenIdResponse] = Field(
        ..., description='Array of access tokens Id.', max_length=10, min_length=0
    )
    object: constr(min_length=25, max_length=25) = Field(
        ..., description='Name of the object.', examples=['AccessTokenIdListResponse']
    )


class AssociatedNormAttorney(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(
        ..., description='Link to related cases for this association.'
    )
    caseTimeline: CaseTimeline
    firstName: constr(max_length=500)
    lastName: constr(max_length=500)
    middleName: constr(max_length=500)
    name: constr(max_length=500)
    normAttorneyAPI: AnyUrl = Field(
        ..., description='Link to details for the Attorney.'
    )
    normAttorneyId: constr(min_length=17, max_length=18)
    object: constr(max_length=22)
    stateBarDataArray: List[BarRecordPreview]


class AssociatedNormAttorneyResponse(BaseModel):
    associatedNormAttorneyArray: List[AssociatedNormAttorney]
    nextPageAPI: AnyUrl = Field(..., description='Next page of results if applicable.')
    previousPageAPI: AnyUrl = Field(
        ..., description='Previous page of results if applicable.'
    )
    totalCount: int = Field(..., description='Total no. of results for this criteria.')
    totalPages: int = Field(..., description='Total no. of pages.')


class AssociatedNormJudge(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(
        ..., description='Link to related cases for this association.'
    )
    caseTimeline: CaseTimeline
    firstName: constr(max_length=500)
    lastName: constr(max_length=500)
    middleName: constr(max_length=500)
    name: constr(max_length=500)
    normJudgeAPI: AnyUrl = Field(..., description='Link to Details from the Judge.')
    normJudgeId: constr(min_length=17, max_length=18)
    object: constr(max_length=19)
    version: constr(max_length=7)


class AssociatedNormJudgeResponse(BaseModel):
    associatedNormJudgeArray: List[AssociatedNormJudge]
    nextPageAPI: AnyUrl
    previousPageAPI: AnyUrl = Field(
        ..., description='Previous page of results if applicable.'
    )
    totalCount: int = Field(..., description='Total no. of results for this criteria.')
    totalPages: int = Field(..., description='Total no. of pages.')


class AssociatedNormLawFirm(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(
        ..., description='Link to related cases for this association.'
    )
    caseTimeline: CaseTimeline
    name: constr(max_length=500)
    normLawFirmAPI: AnyUrl = Field(
        ..., description='Link to Details for this Law Firm.'
    )
    normLawFirmId: constr(min_length=17, max_length=18)
    object: constr(max_length=21)
    sosDataArray: List[SOSDataPreview]


class AssociatedNormLawFirmResponse(BaseModel):
    associatedNormLawFirmArray: List[AssociatedNormLawFirm]
    nextPageAPI: AnyUrl = Field(..., description='Link to next page of results.')
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    totalCount: int = Field(..., description='Total no. of results for this criteria.')
    totalPages: int = Field(..., description='Total no. of pages.')


class AssociatedNormParty(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(
        ..., description='Link to related cases for this association.'
    )
    caseTimeline: CaseTimeline
    name: constr(max_length=500)
    normPartyAPI: AnyUrl = Field(..., description='Link to Details for the Party.')
    normPartyId: constr(min_length=17, max_length=18)
    object: constr(max_length=19)
    sosDataArray: List[SOSDataPreview]


class AssociatedNormPartyResponse(BaseModel):
    associatedNormPartyArray: List[AssociatedNormParty]
    nextPageAPI: AnyUrl = Field(..., description='Link to next page of results.')
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    totalCount: int = Field(..., description='Total no. of results for this criteria.')
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCauseOfAction(BaseModel):
    causeOfAction: CauseOfAction
    causeOfActionAdditionalDataArray: List[CauseOfActionAdditionalData]
    object: constr(min_length=17, max_length=17) = Field(
        ..., description='Name of the object'
    )


class CaseCharge(BaseModel):
    charge: Charge
    chargeAdditionalDataArray: List[ChargeAdditionalData]
    chargeDegree: ChargeDegree
    chargeSeverity: ChargeSeverity
    object: constr(min_length=10, max_length=10) = Field(
        ..., description='Name of the object'
    )


class CaseCountAnalyticsByCaseType(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    caseType: CaseType
    object: constr(max_length=28)


class CaseCountAnalyticsByCaseTypeGroup(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='Link to cases for this criteria.')
    caseTypeGroup: CaseTypeGroup
    object: constr(max_length=33)


class CaseCountAnalyticsByCaseTypeGroupResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=41)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCaseTypeGroup]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalCaseTypeGroupCount: int = Field(
        ..., description='Total no. of Case Type Group for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByCaseTypeResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=36)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCaseType]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalCaseTypeCount: int = Field(
        ..., description='Total no. of CaseType for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByCourt(BaseModel):
    Geo_1: Geo = Field(..., alias='Geo')
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='link to cases for this criteria.')
    court: Court
    object: constr(max_length=25)


class CaseCountAnalyticsByCourtLocation(BaseModel):
    Geo_1: Geo = Field(..., alias='Geo')
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='link to cases for this criteria.')
    court: Court
    courtLocation: CourtLocation
    object: constr(max_length=33)


class CaseCountAnalyticsByCourtLocationResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=41)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCourtLocation]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalCourtLocationCount: int = Field(
        ..., description='Total no. of Court Location for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByCourtResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=33)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCourt]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalCourtCount: int = Field(
        ..., description='Total no. of Court for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByCourtSystem(BaseModel):
    Geo_1: Geo = Field(..., alias='Geo')
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='link to cases for this criteria.')
    courtSystem: CourtSystem
    object: constr(max_length=31)


class CaseCountAnalyticsByCourtSystemResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=39)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCourtSystem]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalCourtSystemCount: int = Field(
        ..., description='Total no. of Court System for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByCourtType(BaseModel):
    Geo_1: Geo = Field(..., alias='Geo')
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='link to cases for this criteria.')
    courtType: CourtType
    object: constr(max_length=29)


class CaseCountAnalyticsByCourtTypeResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=37)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByCourtType]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalCourtTypeCount: int = Field(
        ..., description='Total no. of Court Type for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByJurisdictionGeo(BaseModel):
    Geo_1: Geo = Field(..., alias='Geo')
    caseCount: int
    caseSearchAPI: AnyUrl = Field(..., description='link to cases for this criteria.')
    jurisdictionGeo: JurisdictionGeo
    object: constr(max_length=35)


class CaseCountAnalyticsByJurisdictionGeoResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=43)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByJurisdictionGeo]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalJurisdictionGeoCount: int = Field(
        ..., description='Total no. of Jurisdiction for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')


class CaseCountAnalyticsByPartyRole(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(
        ...,
        description='Link to cases for the entity involving the search criteria. TBD.',
    )
    object: constr(max_length=29)
    partyRole: PartyRole


class CaseCountAnalyticsByPartyRoleGroup(BaseModel):
    caseCount: int
    caseSearchAPI: AnyUrl = Field(
        ...,
        description='Link to cases for the entity involving the search criteria. TBD.',
    )
    object: constr(max_length=34)
    partyRoleGroup: PartyRoleGroup


class CaseCountAnalyticsByPartyRoleGroupResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=42)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByPartyRoleGroup]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')
    totalPartyRoleGroupCount: int = Field(
        ..., description='Total no. of Party Role Group for this criteria.'
    )


class CaseCountAnalyticsByPartyRoleResponse(BaseModel):
    nextPageAPI: AnyUrl
    object: constr(max_length=37)
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page of results.'
    )
    results: List[CaseCountAnalyticsByPartyRole]
    totalCaseCount: int = Field(
        ..., description='Total no. of Cases for this criteria.'
    )
    totalPages: int = Field(..., description='Total no. of pages.')
    totalPartyRoleCount: int = Field(
        ..., description='Total no. of Party Role for this criteria.'
    )


class CaseDocument(BaseModel):
    addedToLibraryDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Date and time when the document was downloaded and added to the UniCourt Crowd Source Library.',
        examples=['2018-02-16T11:43:56+00:00'],
    )
    caseDocumentId: constr(min_length=18, max_length=18) = Field(
        ..., description="UniCourt's Case Document ID.", examples=['CDOCdg1e994374fda7']
    )
    childDocumentIdArray: List[constr(min_length=18, max_length=18)] = Field(
        ...,
        description="List of child document ID's if exists or else it will be an empty lsit.",
    )
    description: constr(max_length=100000) = Field(
        ..., description='Description of the document.', examples=[None]
    )
    documentFiledDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Document Date when it was filed. The document date will be either explicitly provided byt the court or if the document is associatated to a docket entry then the document date will be of docket entry date.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    downloadAPI: constr(max_length=255) = Field(
        ...,
        description='Link to either view the document if it is downloaded and already present in the UniCourt CrowdSourced Library.',
        examples=[
            'https://enterpriseapi.unicourt.com/caseDocumentDownload/CDOC3Ygn47Yuteq3R'
        ],
    )
    estimatedOrderDuration: EstimatedOrderDuration = Field(
        ..., description='Estimated duration of a Order.', examples=['withinMinutes']
    )
    firstFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Is the date when the document was first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    inLibrary: bool = Field(
        ...,
        description='Determines if the document is present in the UniCourt Library or not.',
        examples=[True],
    )
    isPreviewAvailable: bool = Field(
        ...,
        description='Determines if a preview is available for the case document.',
        examples=[True],
    )
    name: constr(max_length=255) = Field(
        ..., description='Document name.', examples=['204']
    )
    object: constr(min_length=12, max_length=12) = Field(
        ..., description='Name of the object'
    )
    pages: int = Field(
        ..., description='Total number of pages in the document.', examples=[2]
    )
    parentDocumentId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Document ID which is the parent document for the current document. This will be null if the current document is a parent document.',
        examples=['CDOC3Ygn4ooAvNjHv'],
    )
    previewDocument: PreviewDocument
    price: float = Field(..., description='Price of the document.', examples=[0.8])
    sortOrder: int = Field(
        ...,
        description='Order of documents how it is being stored in UniCourt.',
        examples=[0],
    )
    sourceDataStatus: SourceDataStatus1 = Field(
        ...,
        description='The status of source data of document. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Document has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.',
        examples=['SOURCE_DEPRECATED'],
    )


class CaseDocumentOrderCallback(BaseModel):
    callbackGeneratedDate: datetime = Field(
        ...,
        description='Date when the job is run.',
        examples=['2022-03-08T10:17:56+00:00'],
    )
    caseDocument: CaseDocument
    caseDocumentId: constr(min_length=18, max_length=18) = Field(
        ..., description="UniCourt's Case Document ID.", examples=['CDOC3Ygn4ooAvNxEr']
    )
    caseDocumentOrderCallbackAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/caseDocumentOrder/callbacks/CBDO3Ygn4ooAv_test'
        ],
    )
    caseDocumentOrderCallbackId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for the Case Document Order Callback.',
        examples=['CBDO3Ygn4ooAvNenww'],
    )
    exception: Exception
    file: ExportFile
    object: constr(min_length=25, max_length=25) = Field(
        ..., description='Name of the object.', examples=['CaseDocumentOrderCallback']
    )
    status: Status1 = Field(
        ..., description='Status of the request.', examples=['COMPLETE']
    )


class CaseDocumentOrderCallbackListResponse(BaseModel):
    callbackArray: List[CaseDocumentOrderCallback] = Field(
        ...,
        description='Array of case document order callback objects.',
        max_length=100,
        min_length=0,
    )
    nextPageAPI: AnyUrl = Field(
        ..., description='Link for the next page.', examples=[None]
    )
    object: constr(min_length=37, max_length=37) = Field(
        ...,
        description='Name of the object.',
        examples=['CaseDocumentOrderCallbackListResponse'],
    )
    pageNumber: int = Field(..., description='Current page number.', examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link for the previous page.', examples=[None]
    )
    totalCount: int = Field(
        ...,
        description='Total number of case document order callback objects available.',
        examples=[1],
    )
    totalPages: int = Field(
        ..., description='Total number of pages available.', examples=[1]
    )


class CaseDocuments(BaseModel):
    caseDocumentArray: List[CaseDocument] = Field(..., max_length=100)
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=13, max_length=13) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class CaseExportCallback(BaseModel):
    callbackGeneratedDate: datetime = Field(
        ...,
        description='Date when the job is run.',
        examples=['2022-03-08T10:17:56+00:00'],
    )
    caseExportCallbackAPI: AnyUrl = Field(
        ...,
        examples=[
            'https://enterpriseapi.unicourt.com/caseExport/callbacks/CBCEG4p62443dedRM3'
        ],
    )
    caseExportCallbackId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for the Case Export Callback.',
        examples=['CBCEG4p62443dedRM3'],
    )
    caseId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for a Case in UniCourt.',
        examples=['CASEak7aa69cdf27a1'],
    )
    exception: Exception
    file: ExportFile
    object: constr(min_length=18, max_length=18) = Field(
        ..., description='Name of the object.', examples=['CaseExportCallback']
    )
    status: Status1 = Field(
        ..., description='Status of the request.', examples=['COMPLETE']
    )


class CaseExportCallbackListResponse(BaseModel):
    callbackArray: List[CaseExportCallback] = Field(
        ...,
        description='Array of case export callback objects.',
        max_length=100,
        min_length=0,
    )
    nextPageAPI: constr(min_length=1, max_length=1024) = Field(
        ..., description='Link for the next page.', examples=[None]
    )
    object: constr(min_length=30, max_length=30) = Field(
        ...,
        description='Name of the object.',
        examples=['CaseExportCallbackListResponse'],
    )
    pageNumber: int = Field(..., description='Current page number.', examples=[1])
    previousPageAPI: constr(min_length=1, max_length=1024) = Field(
        ..., description='Link for the previous page.', examples=[None]
    )
    totalCount: int = Field(
        ...,
        description='Total number of case export callback objects available.',
        examples=[1],
    )
    totalPages: int = Field(
        ..., description='Total number of pages available.', examples=[1]
    )


class CaseSearchResult(BaseModel):
    caseAPI: AnyUrl = Field(
        ..., examples=['https://enterpriseapi.unicourt.com/case/CASEgq222a2d1239af']
    )
    caseId: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CASEgq222a2d1239af']
    )
    caseName: constr(max_length=250) = Field(
        ..., examples=['Salgado v. Midland Funding, LLC et al']
    )
    caseNumber: constr(min_length=1, max_length=255) = Field(
        ..., examples=['1:18-cv-08559']
    )
    caseStatus: CaseStatus
    caseType: CaseType
    court: Court
    courtLocation: CourtLocation
    filedDate: datetime = Field(..., examples=['2018-12-31T00:00:00+00:00'])
    firstFetchDate: datetime = Field(..., examples=['2019-01-01T11:20:09+00:00'])
    lastFetchDate: datetime = Field(..., examples=['2020-04-25T10:42:46+00:00'])
    lastFetchDateWithUpdates: datetime = Field(
        ..., examples=['2020-04-25T10:42:46+00:00']
    )
    matchedObjectArray: List[MatchedObject]
    object: constr(min_length=16, max_length=16) = Field(
        ..., examples=['CaseSearchResult']
    )
    participantsLastFetchDate: datetime = Field(
        ..., examples=['2020-04-25T10:42:46+00:00']
    )


class CaseTrackPreview(BaseModel):
    caseAPI: AnyUrl = Field(
        ..., examples=['https://enterpriseapi.unicourt.com/case/CASEgq222a2d1239af']
    )
    caseId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for a Case in UniCourt.',
        examples=['CASEhq9d8b72d0800c'],
    )
    lastFetchDate: datetime = Field(
        ...,
        description='The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    lastFetchDateWithUpdates: datetime = Field(
        ...,
        description='The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    lastTrackedDetails: LastTrackedDetails
    object: constr(min_length=16, max_length=16) = Field(
        ..., description='Name of the object.', examples=['CaseTrackPreview']
    )
    pacerOptions: CaseUpdatePacerOptionsResponse
    schedule: Schedule


class CaseTrackRequest(BaseModel):
    caseTrackParams: CaseUpdateRequest
    schedule: CaseTrackSchedule


class CaseUpdatePreview(BaseModel):
    caseAPI: AnyUrl = Field(
        ..., examples=['https://enterpriseapi.unicourt.com/case/CASEgq222a2d1239af']
    )
    caseId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for a Case in UniCourt.',
        examples=['CASEhq9d8b72d0800c'],
    )
    exception: Exception
    object: constr(min_length=17, max_length=17) = Field(
        ..., description='Name of the object.', examples=['CaseUpdatePreview']
    )
    pacerOptions: CaseUpdatePacerOptionsResponse
    requestedDate: datetime = Field(
        ...,
        description='The date and time when the case was last requested for update ',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    status: Status1 = Field(
        ..., description='Status of the request.', examples=['COMPLETE']
    )


class Contact(BaseModel):
    addressArray: List[Address] = Field(..., description='List of available addresses.')
    emailArray: List[Email] = Field(..., description='List of available emails.')
    object: constr(min_length=7, max_length=7) = Field(..., examples=['Contact'])
    phoneNumberArray: List[Phone] = Field(
        ..., description='List of available phone numbers.'
    )


class DocketEntryPrimaryDocuments(BaseModel):
    caseDocumentArray: List[CaseDocument] = Field(..., max_length=100)
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=27, max_length=27) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case. entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class DocketEntrySecondaryDocuments(BaseModel):
    caseDocumentArray: List[CaseDocument] = Field(..., max_length=100)
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=29, max_length=29) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case. entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class Judge(BaseModel):
    contact: Contact
    firstFetchDate: datetime = Field(
        ...,
        description='When was the judge first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    firstName: constr(max_length=250) = Field(
        ...,
        description='First name of the judge. This is normalized by UniCourt.',
        examples=['Donald'],
    )
    isVisible: bool = Field(
        ...,
        description='Signifies if the judge as this judge type is currently isVisible or not for the case.',
        examples=[True],
    )
    judgeId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='ID for the judge in this case. This ID is unique within a case and NOT across cases. If the same Judge were to appear in another case this ID would be different.',
        examples=['JUDGgue04d2894de7a'],
    )
    judgeType: JudgeType
    lastFetchDate: datetime = Field(
        ...,
        description='When was the judge last fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    lastName: constr(max_length=100) = Field(
        ...,
        description='Last name of the judge. This is normalized by UniCourt.',
        examples=['Grincewicz'],
    )
    middleName: constr(max_length=100) = Field(
        ...,
        description='Middle name of the judge. This is normalized by UniCourt.',
        examples=['E'],
    )
    name: constr(min_length=1, max_length=250) = Field(
        ...,
        description='Name of the judge as provided by Court.',
        examples=['Donald E Grincewicz'],
    )
    namePrefix: constr(max_length=10)
    nameSuffix: constr(max_length=10)
    object: constr(min_length=5, max_length=5) = Field(
        ..., description='Name of the object'
    )
    possibleNormJudgeArray: List[PossibleNormJudge]
    sourceJudgeType: constr(max_length=50) = Field(..., examples=['judge'])


class Judges(BaseModel):
    judgeArray: List[Judge] = Field(..., max_length=25)
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=6, max_length=6) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class NormAttorneySearchResponse(BaseModel):
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    normAttorneySearchId: constr(min_length=18, max_length=18) = Field(
        ..., description='Query been sent by client', examples=['ASRCe8eCknX9E8pQQ6']
    )
    normAttorneySearchResultArray: List[NormAttorneySearchResult] = Field(
        ..., max_length=10
    )
    object: constr(min_length=26, max_length=26) = Field(
        ..., examples=['NormAttorneySearchResponse']
    )
    pageNumber: int = Field(..., examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    q: constr(min_length=3, max_length=2048) = Field(
        ...,
        description='Query been sent by client',
        examples=['normAttorneyId%3A%22NATYabUuTuEiuiRzc%22'],
    )
    totalCount: int = Field(
        ...,
        description='The number of matches that were found in the index.',
        examples=[1],
    )
    totalPages: int = Field(
        ...,
        description='Total pages for matches that were found in the index.',
        examples=[1],
    )


class NormJudgePublicData(BaseModel):
    abaRatings: AbaRatings = Field(
        ..., description='American Bar Association (ABA) Rating of the Judge.'
    )
    aliasArray: List[constr(max_length=250)] = Field(
        ..., description='Other Names of the Judge.'
    )
    bio: Bio
    contact: Contact
    educationArray: List[EducationArrayItem] = Field(
        ..., description='The Education History of the judge.', max_length=250
    )
    firstFetchDate: datetime
    judicialSource: JudicialSource = Field(
        ..., description='The judicial source of the Judge'
    )
    judicialStatus: constr(max_length=50) = Field(
        ..., description='The judicial status of the Judge'
    )
    lastFetchDate: datetime
    lastFetchDateWithUpdates: datetime = Field(
        ..., description='Last Fetch Date of the Judge Update.'
    )
    nameHistoryArray: List[NameHistoryArrayItem] = Field(
        ...,
        description='Name changes of the Judge. Change in the official name. Other names go to Alias array.',
    )
    object: constr(max_length=19)
    professionalCareerArray: List[constr(max_length=2000)] = Field(
        ..., description='The non-judicial career history of the judge.'
    )
    serviceHistoryArray: List[ServiceHistory] = Field(
        ..., description='Judicial History of the Judge.'
    )


class NormJudgeSearchResponse(BaseModel):
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    normJudgeSearchId: constr(min_length=18, max_length=18) = Field(
        ..., description='Query been sent by client', examples=['JSRCEvsmuaffjKjW9T']
    )
    normJudgeSearchResultArray: List[NormJudgeSearchResult] = Field(..., max_length=10)
    object: constr(min_length=23, max_length=23) = Field(
        ..., examples=['NormJudgeSearchResponse']
    )
    pageNumber: int = Field(..., examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    q: constr(min_length=3, max_length=2048) = Field(
        ...,
        description='Query been sent by client',
        examples=['normJudgeId%3A%22NJUDXnbhERCyKSaUj%22'],
    )
    totalCount: int = Field(
        ...,
        description='The number of matches that were found in the index.',
        examples=[1],
    )
    totalPages: int = Field(
        ...,
        description='Total pages for matches that were found in the index.',
        examples=[1],
    )


class NormLawFirmSearchResponse(BaseModel):
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    normLawFirmSearchId: constr(min_length=18, max_length=18) = Field(
        ..., description='Query been sent by client', examples=['LSRCTQ6CCfmFNg472y']
    )
    normLawFirmSearchResultArray: List[NormLawFirmSearchResult] = Field(
        ..., max_length=10
    )
    object: constr(min_length=25, max_length=25) = Field(
        ..., examples=['NormLawFirmSearchResponse']
    )
    pageNumber: int = Field(..., examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    q: constr(min_length=3, max_length=2048) = Field(
        ...,
        description='Query been sent by client',
        examples=['normLawFirmId%3A%22NORGgooQKwAYeRhcv%22'],
    )
    totalCount: int = Field(
        ...,
        description='The number of matches that were found in the index.',
        examples=[1],
    )
    totalPages: int = Field(
        ...,
        description='Total pages for matches that were found in the index.',
        examples=[1],
    )


class NormPartySearchResponse(BaseModel):
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    normPartySearchId: constr(min_length=18, max_length=18) = Field(
        ..., description='Query been sent by client', examples=['PSRCMT69XMcMgmzyw7']
    )
    normPartySearchResultArray: List[NormPartySearchResult] = Field(..., max_length=10)
    object: constr(min_length=23, max_length=23) = Field(
        ..., examples=['NormPartySearchResponse']
    )
    pageNumber: int = Field(..., examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    q: constr(min_length=3, max_length=2048) = Field(
        ...,
        description='Query been sent by client',
        examples=['normPartyId%3A%22NORGSCPx3qNeJiqye%22'],
    )
    totalCount: int = Field(
        ...,
        description='The number of matches that were found in the index.',
        examples=[1],
    )
    totalPages: int = Field(
        ...,
        description='Total pages for matches that were found in the index.',
        examples=[1],
    )


class PACERCaseSearchResults(BaseModel):
    hasOnlyMetaInfo: bool = Field(
        ...,
        description='This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.',
        examples=[False],
    )
    object: constr(min_length=22, max_length=22) = Field(
        ..., description='Name of the object'
    )
    pacerContent: PACERCaseSearchContent
    uniCourtContent: CaseSearchResult


class PACERImportCaseResults(BaseModel):
    hasOnlyMetaInfo: bool = Field(
        ...,
        description='This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.',
        examples=[False],
    )
    object: constr(min_length=22, max_length=22) = Field(
        ..., description='Name of the object'
    )
    uniCourtContent: CaseSearchResult


class PACERPartySearchResults(BaseModel):
    hasOnlyMetaInfo: bool = Field(
        ...,
        description='This field determines if the UniCourt Content has only meta information. If the value is true and you require to get the latest updates of the case you will need to make a request to the updateCase API.',
        examples=[False],
    )
    object: constr(min_length=23, max_length=23) = Field(
        ..., description='Name of the object'
    )
    pacerContent: PACERPartySearchContent
    uniCourtContent: CaseSearchResult


class PCLCase(BaseModel):
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of the PCL Search Results.',
        examples=[
            'https://enterpriseapi.unicourt.com/pacerCaseLocator/partySearch/civilCourts?pageNumber=2&jobId=PCLJ3Ygn4ooAvNenww'
        ],
    )
    object: constr(min_length=7, max_length=7) = Field(
        ..., description='Name of the object'
    )
    pacerPageInfo: PACERSearchPageInfo
    pacerReceipt: PACERSearchReceipt
    pacerSearchResultsArray: List[PACERCaseSearchResults]
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of records available for this Search.',
        examples=[125],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects the current PCL Search.',
        examples=[3],
    )


class PCLParty(BaseModel):
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of the PCL Search Results.',
        examples=[
            'https://enterpriseapi.unicourt.com/pacerCaseLocator/partySearch/civilCourts?pageNumber=2&jobId=PCLJ3Ygn4ooAvNenww'
        ],
    )
    object: constr(min_length=8, max_length=8) = Field(
        ..., description='Name of the object'
    )
    pacerPageInfo: PACERSearchPageInfo
    pacerReceipt: PACERSearchReceipt
    pacerSearchResultsArray: List[PACERPartySearchResults]
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of records available for this Search.',
        examples=[125],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects the current PCL Search.',
        examples=[3],
    )


class Party(BaseModel):
    attorneyRepresentationType: AttorneyRepresentationType
    contact: Contact
    firstFetchDate: datetime = Field(
        ...,
        description='When was the party first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    firstName: constr(max_length=250) = Field(
        ...,
        description='First name of the party. This is normalized by UniCourt.',
        examples=['LA'],
    )
    isVisible: bool = Field(
        ...,
        description='Signifies if the party as this party type is currently isVisible or not for the case.',
        examples=[True],
    )
    lastFetchDate: datetime = Field(
        ...,
        description='When was the party last fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    lastName: constr(max_length=100) = Field(
        ...,
        description='Last name of the party. This is normalized by UniCourt.',
        examples=['DE'],
    )
    middleName: constr(max_length=100) = Field(
        ...,
        description='Middle name of the party. This is normalized by UniCourt.',
        examples=['FUENTE JOE'],
    )
    name: constr(min_length=1, max_length=250) = Field(
        ...,
        description='Name of the party as provided by Court.',
        examples=['DE LA FUENTE JOE'],
    )
    namePrefix: constr(max_length=10)
    nameSuffix: constr(max_length=10)
    object: constr(min_length=5, max_length=5) = Field(
        ..., description='Name of the object'
    )
    partyAttorneyAssociations: PartyAttorneyAssociations
    partyClassificationType: PartyClassificationType1 = Field(
        ...,
        description='To know the type of an entity in a case, if it is an Individual, Company or Other. An entity to a case could be the parties, attorneys or judges involved.',
    )
    partyId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='ID for the party in this case. This ID is unique within a case and NOT across cases. If the same party were to appear in another case this ID would be different.',
        examples=['PRTYgu537f3901f406'],
    )
    partyRole: PartyRole
    possibleNormPartyArray: List[PossibleNormParty]
    sourcePartyRole: constr(max_length=50) = Field(
        ..., description='Party Type as provided by Court.', examples=['ptf']
    )


class RawOrderedData(BaseModel):
    childArray: List[RawOrderedDataChild] = Field(
        ...,
        description='Any docket text that belongs to the main docket text is added in the child.',
    )
    lbl: constr(max_length=100000) = Field(
        ..., description='Label of the docket from the source.', examples=['name']
    )
    ord: int = Field(..., description='Structure order', examples=[0])
    val: constr(max_length=1000000) = Field(
        ..., description='List of available addresses.', examples=['Proietti, Donald']
    )


class ServiceStatus(BaseModel):
    object: constr(min_length=13, max_length=13) = Field(
        ..., description='Name of the object'
    )
    serviceDetails: ServiceDetails = Field(
        ...,
        description='Status Details of Case Update Services Status.',
        examples=['notAcceptingCaseUpdates'],
    )
    serviceStatusDownDetails: ServiceStatusDownDetails
    serviceUp: bool = Field(
        ..., description='Status of Case Update Services Status.', examples=[False]
    )


class SourceCharge(BaseModel):
    firstFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When this charge was first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    isVisible: bool = Field(
        ...,
        description='Signifies if the charge is currently isVisible or not for the case.',
        examples=[True],
    )
    lastFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When this charge was last fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    object: constr(min_length=12, max_length=12) = Field(
        ..., description='Name of the object'
    )
    sourceCharge: constr(max_length=255) = Field(
        ...,
        description='Charge data from the source site.',
        examples=['COMMIT ASSAULT OR BATTERY DURING BURGLARY'],
    )
    sourceChargeAdditionalDataArray: List[SourceChargeAdditionalData] = Field(
        ...,
        description='Additional data related to the charge which is available in the source site.',
    )
    sourceChargeDegree: constr(max_length=255) = Field(
        ...,
        description='Charge degree data from the source site.',
        examples=['First Degree'],
    )
    sourceChargeRaw: constr(max_length=255) = Field(
        ...,
        description='Raw charge data from the source site.',
        examples=['836.12.2 THREATENING A LAW ENFORCEMENT OFFICER'],
    )
    sourceChargeSeverity: constr(max_length=255) = Field(
        ...,
        description='Charge severity data from the source site.',
        examples=['Misdemeanor'],
    )
    sourceStatute: constr(max_length=50) = Field(
        ..., description='Statute of a charge.', examples=['836.12.2']
    )


class SourceStructuredData(BaseModel):
    extractedFields: ExtractedFields
    rawOrderedDataArray: List[RawOrderedData]


class AssociatedSoSPerson(BaseModel):
    contact: Contact
    entityName: constr(max_length=500)
    entityType: EntityType
    object: constr(max_length=19)


class Attorney(BaseModel):
    attorneyId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='ID for the attorney in this case. This ID is unique within a case and NOT across cases. If the same attorney were to appear in another case this ID would be different.',
        examples=['ATTYgu01be2e4de654'],
    )
    attorneyLawFirmArray: List[AttorneyLawFirm] = Field(..., max_length=25)
    attorneyType: AttorneyType
    barNumber: constr(max_length=250) = Field(
        ..., description='The bar enrollment number of an attorney.'
    )
    contact: Contact
    firstFetchDate: datetime = Field(
        ...,
        description='When was the attorney first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    firstName: constr(max_length=250) = Field(
        ...,
        description='First name of the attorney. This is normalized by UniCourt.',
        examples=['POMERANTZ'],
    )
    isVisible: bool = Field(
        ...,
        description='Signifies if the attorney as this attorney type is currently isVisible or not for the case.',
        examples=[True],
    )
    lastFetchDate: datetime = Field(
        ...,
        description='When was the attorney last fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    lastName: constr(max_length=100) = Field(
        ...,
        description='Last name of the attorney. This is normalized by UniCourt.',
        examples=['SLONE'],
    )
    middleName: constr(max_length=100) = Field(
        ...,
        description='Middle name of the attorney. This is normalized by UniCourt.',
        examples=['ANDREW'],
    )
    name: constr(min_length=1, max_length=250) = Field(
        ...,
        description='Name of the attorney as provided by Court.',
        examples=['POMERANTZ ANDREW SLONE'],
    )
    namePrefix: constr(max_length=10)
    nameSuffix: constr(max_length=10)
    object: constr(min_length=8, max_length=8) = Field(
        ..., description='Name of the object'
    )
    partyAttorneyAssociations: PartyAttorneyAssociations
    partyRoleGroupIdArray: List[constr(min_length=18, max_length=18)] = Field(
        ..., description='Party Role Group Id for a Attorney.'
    )
    partyRoleIdArray: List[constr(min_length=18, max_length=18)] = Field(
        ..., description='Party Role Id for a Attorney.'
    )
    possibleNormAttorneyArray: List[PossibleNormAttorney]
    possibleNormLawFirmArray: List[PossibleNormLawFirm] = Field(
        ..., description='Possible Norm Lawfirm array for a Attorney.'
    )
    sourceAttorneyType: constr(max_length=250) = Field(
        ..., description='Attorney Type as provided by Court.', examples=['atty']
    )


class Attorneys(BaseModel):
    attorneyArray: List[Attorney] = Field(..., max_length=25)
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/attorneys/?pageNumber=1'
        ],
    )
    object: constr(min_length=9, max_length=9) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class BarRecord(BaseModel):
    admittedDate: datetime = Field(
        ...,
        description='The admittedDate is the date when an attorney was admitted to the bar of a given state.',
    )
    barNumber: constr(max_length=250)
    barSourceData: BarSourceData
    barSourceType: constr(max_length=70)
    contact: Contact
    firstFetchDate: datetime
    inactivationDate: datetime
    lastFetchDate: datetime
    lastFetchDateWithUpdates: datetime = Field(
        ..., description='Last Fetch Date of the Attorney Update.'
    )
    object: constr(max_length=9)
    stateCode: constr(max_length=2)
    status: Status


class CaseSearchResponse(BaseModel):
    caseSearchId: constr(min_length=18, max_length=18) = Field(
        ..., description='Query been sent by client', examples=['CSRCg78ofjDLzhjRpW']
    )
    caseSearchResultArray: List[CaseSearchResult] = Field(..., max_length=10)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=18, max_length=18) = Field(
        ..., examples=['CaseSearchResponse']
    )
    pageNumber: int = Field(..., examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    q: constr(min_length=3, max_length=2048) = Field(
        ...,
        description='Query been sent by client',
        examples=['caseId%3A%22CASEgq222a2d1239af%22'],
    )
    totalCount: int = Field(
        ...,
        description='The number of matches that were found in the index.',
        examples=[1],
    )
    totalPages: int = Field(
        ...,
        description='Total pages for matches that were found in the index.',
        examples=[1],
    )


class CaseTrackListResponse(BaseModel):
    caseTrackPreviewArray: List[CaseTrackPreview] = Field(
        ..., description='Array of cases tracked.', max_length=100, min_length=0
    )
    nextPageAPI: AnyUrl = Field(
        ...,
        description='Link for the next page.',
        examples=[
            'https://enterpriseapi.unicourt.com/rest/v2/case/caseTrack?pageNumber=2'
        ],
    )
    object: constr(min_length=21, max_length=21) = Field(
        ..., description='Name of the object.', examples=['CaseTrackListResponse']
    )
    pageNumber: int = Field(..., description='Current page number.')
    previousPageAPI: AnyUrl = Field(
        ..., description='Link for the previous page.', examples=[None]
    )
    totalCount: int = Field(..., description='Total number of case track available.')
    totalPages: int = Field(..., description='Total number of pages available.')


class CaseUpdateListResponse(BaseModel):
    caseUpdatePreviewArray: List[CaseUpdatePreview] = Field(
        ..., description='Array of case update objects.', max_length=100, min_length=0
    )
    nextPageAPI: AnyUrl = Field(
        ..., description='Link for the next page.', examples=[None]
    )
    object: constr(min_length=22, max_length=22) = Field(
        ..., description='Name of the object.', examples=['CaseUpdateListResponse']
    )
    pageNumber: int = Field(..., description='Current page number.', examples=[1])
    previousPageAPI: AnyUrl = Field(
        ..., description='Link for the previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of case update objects available.', examples=[1]
    )
    totalPages: int = Field(
        ..., description='Total number of pages available.', examples=[1]
    )


class CourtServiceStatus(BaseModel):
    caseClassIdArray: List[constr(min_length=18, max_length=18)] = Field(
        ...,
        description='All the Case class ids associated to the service status',
        examples=[['CACLf7txmD5m5Y8RyZ']],
    )
    caseDocumentOrderServiceStatus: ServiceStatus
    caseTrackServiceStatus: ServiceStatus
    caseUpdateServiceStatus: ServiceStatus
    courtIdArray: List[constr(min_length=18, max_length=18)] = Field(
        ...,
        description='All the court ids associated to the service status',
        examples=[['CRSCV4vCEaKrhysQPq']],
    )
    courtLocationIdArray: List[constr(min_length=18, max_length=18)] = Field(
        ...,
        description='All the court location ids associated to the service status',
        examples=[['COLO35ekoDzA9iU5x4']],
    )
    courtServiceStatusId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Court Service Status Object ID',
        examples=['CTSSV4vCEaKrhysQPq'],
    )
    object: constr(min_length=18, max_length=18) = Field(
        ..., description='Name of the object'
    )
    serviceStatusAsOn: constr(min_length=25, max_length=25) = Field(
        ...,
        description='Date when the service status was last fetched.',
        examples=['2022-10-26T04:05:45+00:43'],
    )


class CourtServiceStatusResponse(BaseModel):
    courtServiceStatusArray: List[CourtServiceStatus] = Field(..., max_length=100)
    nextPageAPI: AnyUrl = Field(..., description='Link to next page.', examples=[None])
    object: constr(min_length=26, max_length=26) = Field(
        ..., examples=['CourtServiceStatusResponse']
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    previousPageAPI: AnyUrl = Field(
        ..., description='Link to previous page.', examples=[None]
    )
    totalCount: int = Field(
        ..., description='Total number of matches found.', examples=[1]
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects.',
        examples=[1],
    )


class DocketEntry(BaseModel):
    boundary: Boundary = Field(
        ...,
        description='Determines if it is the first docket entry or the last docket entry. This value will be set only for the first and last docket entry. For other docket entries it will be null. However, this will be set as single_docket_entry when the Case contains only one docket entry.',
        examples=['last'],
    )
    docketBadge: DocketBadge = Field(
        ...,
        description='Docket Badge helps you to know what type of a docket entry it is.',
        examples=['DOCKET'],
    )
    docketEntryDate: datetime = Field(
        ..., description='Docket Action Date', examples=['2020-04-28T11:51:27+00:00']
    )
    docketEntryPrimaryDocuments: DocketEntryPrimaryDocuments
    docketEntrySecondaryDocuments: DocketEntrySecondaryDocuments
    docketNumber: int = Field(
        ...,
        description='The respective docket entry number which is defined in the court website.',
        examples=[204],
    )
    lastFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When this docket entry was last fetched from the source.',
        examples=['2020-04-28T11:51:27+00:00'],
    )
    object: constr(min_length=11, max_length=11) = Field(
        ..., description='Name of the object'
    )
    referencedDocketNumberArray: List[ReferencedDocketNumber] = Field(
        ...,
        description='Other Docket Numbers that referenced for a particular docket entry.',
    )
    sortOrder: int = Field(
        ...,
        description='Order number how the dockets have stored in UniCourt.',
        examples=[0],
    )
    text: constr(max_length=1000000) = Field(
        ...,
        description='Source Docket Entry',
        examples=[
            'STIPULATION for Extension of Time to File Answer to 01/15/2020 re Answer to Complaint (Attorney Civil Case Opening),,,,,, Crossclaim,,,,,, Counterclaim,,,,, #172 filed by Cross-Complainant TW Tedesco Properties, L.P.. (Attachments: #1 Proposed Order)(Hamrick, Alpheus) (Entered: 12/05/2019)'
        ],
    )
    textStructured: SourceStructuredData


class Hearing(BaseModel):
    firstFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When this hearing was first fetched from the source.',
        examples=['2020-04-28T11:51:27+00:00'],
    )
    hearingDate: datetime = Field(
        ..., description='Hearing Date', examples=['2020-04-28T11:51:27+00:00']
    )
    hearingDescription: constr(max_length=100000) = Field(
        ...,
        description='Source Hearing Description Text',
        examples=[
            'STIPULATION for Extension of Time to File Answer to 01/15/2020 re Answer to Complaint (Attorney Civil Case Opening),,,,,, Crossclaim,,,,,, Counterclaim,,,,, #172 filed by Cross-Complainant TW Tedesco Properties, L.P.. (Attachments: #1 Proposed Order)(Hamrick, Alpheus) (Entered: 12/05/2019)'
        ],
    )
    hearingStructured: SourceStructuredData
    lastFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When this hearing was last fetched from the source.',
        examples=['2020-04-28T11:51:27+00:00'],
    )
    location: constr(max_length=250) = Field(
        ...,
        description='Location where the hearing will takeplace.',
        examples=['Los Angeles'],
    )
    object: constr(min_length=7, max_length=7) = Field(
        ..., description='Name of the object'
    )


class Hearings(BaseModel):
    hearingArray: List[Hearing]
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=8, max_length=8) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class NormAttorney(BaseModel):
    attorneyAnalyticsAPI: AttorneyAnalyticsAPI
    barRecordArray: List[BarRecord]
    caseAnalyticsAPI: CaseAnalyticsAPI
    caseSearchAPI: AnyUrl
    firstName: constr(max_length=500)
    hasAssociatedPublicData: bool
    lastName: constr(max_length=500)
    middleName: constr(max_length=500)
    name: constr(max_length=500)
    normAttorneyId: constr(min_length=18, max_length=18)
    object: constr(max_length=12)
    similarNormAttorneyArray: List[SimilarNormAttorney]


class NormJudge(BaseModel):
    caseAnalyticsAPI: CaseAnalyticsAPI
    caseSearchAPI: AnyUrl
    firstName: constr(max_length=500)
    hasAssociatedPublicData: bool
    judgeAnalyticsAPI: JudgeAnalyticsAPI
    judicialDataArray: List[NormJudgePublicData]
    lastName: constr(max_length=500)
    middleName: constr(max_length=500)
    name: constr(max_length=500)
    normJudgeId: constr(min_length=18, max_length=18)
    object: constr(max_length=9)


class PACERImportCase(BaseModel):
    courtFee: float = Field(
        ...,
        description='Court Fee charged for the Find Case request. This is only applicable for Appeal Cases.',
        examples=[0.1],
    )
    object: constr(min_length=15, max_length=15) = Field(
        ..., description='Name of the object'
    )
    pacerImportCaseResultsArray: List[PACERImportCaseResults]


class Parties(BaseModel):
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=7, max_length=7) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    partyArray: List[Party] = Field(..., max_length=25)
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class RelatedCase(BaseModel):
    additionalSourceData: SourceStructuredData
    caseAPI: constr(max_length=255) = Field(
        ...,
        description='Link to the Case API of the current related case.',
        examples=['https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/'],
    )
    caseId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Case ID of the related Case. This can be null if this case in not found in our database. However the meta information of the related case will be present.',
        examples=['CASEjr6533d15dc165'],
    )
    caseName: constr(max_length=250) = Field(
        ...,
        description='Case Name of the related Case.',
        examples=['Richard Jacob vs Johnson & Johnson'],
    )
    caseNumber: constr(min_length=3, max_length=50) = Field(
        ...,
        description='Case Number of the related Case.',
        examples=['CAC/3:19-cv-0001'],
    )
    caseRelationshipType: CaseRelationshipType
    isVisible: bool = Field(
        ...,
        description='This specifies if the related cases is still related to the parent case or not.',
        examples=[True],
    )
    object: constr(min_length=11, max_length=11) = Field(
        ..., description='Name of the object'
    )
    sourceCaseRelationshipType: constr(min_length=3, max_length=250) = Field(
        ...,
        description='Case Relationship Type provided by court.',
        examples=['PARENT CASE'],
    )


class RelatedCases(BaseModel):
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=12, max_length=12) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    relatedCaseArray: List[RelatedCase] = Field(..., max_length=100)
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class SOSData(BaseModel):
    associatedSoSPersonArray: List[AssociatedSoSPerson]
    contact: Contact
    domesticRegistration: bool
    fein: constr(max_length=16)
    firstFetchDate: datetime
    inactivationDate: datetime
    isActive: bool
    lastFetchDate: datetime
    lastFetchDateWithUpdates: datetime = Field(
        ..., description='Last Fetch Date of Organization with Updates.'
    )
    nameChangesArray: List[SOSNameChange]
    object: constr(max_length=7)
    registeredDate: datetime
    sosAssociatedNormOrganizationArray: List[SOSAssociatedNormOrganization]
    sosNumber: constr(max_length=50)
    stateCode: constr(max_length=2)
    status: Status5


class SourcePageData(BaseModel):
    additionalSourceData: SourceStructuredData
    firstFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When was the page first fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    lastFetchDate: constr(min_length=25, max_length=25) = Field(
        ...,
        description='When was the page last fetched from the court site.',
        examples=['2021-10-10T10:10:24+00:00'],
    )
    object: constr(min_length=14, max_length=14) = Field(
        ..., description='Name of the object'
    )
    pageName: constr(max_length=100) = Field(
        ...,
        description='Pages supported for PACER pacerCaseQuery, pacerDocketReport, pacerCaseSummary, pacerAssociatedCases, pacerCaseLocatorResults, hearing, relatedCases.',
        examples=['PACER_CASE_QUERY'],
    )


class DocketEntries(BaseModel):
    docketEntryArray: List[DocketEntry] = Field(..., max_length=100)
    nextPageAPI: constr(max_length=255) = Field(
        ...,
        description='Link to next page of a particular entity in a Case.',
        examples=[
            'https://enterpriseapi.unicourt.com/case/CASEgued96d541f794/parties/?pageNumber=1'
        ],
    )
    object: constr(min_length=13, max_length=13) = Field(
        ..., description='Name of the object'
    )
    pageNumber: int = Field(
        ..., description='Page number for which results where obtained.', examples=[1]
    )
    totalCount: int = Field(
        ...,
        description='Total number of parties of the Case entity in a Case.',
        examples=[150],
    )
    totalPages: int = Field(
        ...,
        description='Total number of pages to obtain all the objects of a party in the Case.',
        examples=[120],
    )


class NormOrganization(BaseModel):
    cik: constr(max_length=15)
    isInvolvedInLitigation: bool
    lei: constr(max_length=250)
    naics: constr(max_length=250)
    naicsDescription: constr(max_length=250)
    name: constr(max_length=500)
    normCorporateGroupArray: List[NormCorporateGroup]
    normOrganizationId: constr(min_length=18, max_length=18)
    normPartyAPI: AnyUrl
    object: constr(max_length=16)
    organizationType: OrganizationType
    sic: constr(max_length=10)
    sicDescription: constr(max_length=100)
    sosDataArray: List[SOSData]
    tickerArray: List[TickerArrayItem] = Field(..., max_length=250)


class NormParty(BaseModel):
    caseAnalyticsAPI: CaseAnalyticsAPI
    caseSearchAPI: AnyUrl
    individualData: IndividualData = Field(
        ...,
        description='* Only applicable if the Party is an Individual.\n',
        title='Individual',
    )
    name: constr(max_length=500)
    normOrganizationData: NormOrganization
    normPartyId: constr(min_length=18, max_length=18)
    object: constr(max_length=9)
    partyAnalyticsAPI: PartyAnalyticsAPI
    partyClassificationType: PartyClassificationType
    relatedNormPartyArray: List[RelatedNormParty]


class SourceCaseData(BaseModel):
    natureOfSuitArray: List[NatureOfSuit] = Field(
        ..., description='Array of Charges for a case which is provided by the Court.'
    )
    object: constr(min_length=14, max_length=14) = Field(
        ..., description='Name of the object'
    )
    sourceCaseStatus: constr(max_length=250) = Field(
        ..., description='Case Status as provided by Court.', examples=['PENDING']
    )
    sourceCaseType: constr(max_length=250) = Field(
        ...,
        description='Case Type for a case which is provided by the Court.',
        examples=['CHAPTER 13'],
    )
    sourceCauseOfActionArray: List[SourceCauseOfAction] = Field(
        ...,
        description='Array of Cause Of Action for a case which is provided by the Court.',
    )
    sourceChargeArray: List[SourceCharge] = Field(
        ..., description='Array of Charges for a case which is provided by the Court.'
    )
    sourceCourt: constr(max_length=250) = Field(
        ...,
        description='Courtrhouse as provided by Court.',
        examples=['U.S. Bankruptcy Courts'],
    )
    sourcePageData: List[SourcePageData]


class Case(BaseModel):
    attorneys: Attorneys
    caseDocuments: CaseDocuments
    caseId: constr(min_length=18, max_length=18) = Field(
        ..., description='Unique identifier of Case.', examples=['CASEgued96d541f794']
    )
    caseName: constr(max_length=250) = Field(
        ...,
        description='Case name as provided by Court.',
        examples=['Mark C. Bonomi and Nicole A. Bonomi'],
    )
    caseNumber: constr(min_length=3, max_length=50) = Field(
        ..., description='Case number as provided by Court.', examples=['2:19-BK-20033']
    )
    caseStats: CaseStats
    caseStatus: CaseStatus
    caseType: CaseType
    causeOfActionArray: List[CaseCauseOfAction] = Field(
        ..., description='Array of cause of Actions that are added to this case.'
    )
    chargeArray: List[CaseCharge] = Field(
        ..., description='Array of charges that are added to this case.'
    )
    court: Court
    courtLocation: CourtLocation
    courtServiceStatusAPI: constr(max_length=250) = Field(
        ...,
        description='API to get the service statuses of the given case.',
        examples=[
            'https://enterpriseapi.unicourt.com/masterData/courtServiceStatus/CTSSV4vCEaKrhysQPq'
        ],
    )
    courtServiceStatusId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Court Service Status ID of the requested case where we can use it to get the service status',
        examples=['CTSSV4vCEaKrhysQPq'],
    )
    docketEntries: DocketEntries
    exportAPI: constr(max_length=255) = Field(
        ...,
        description='When a case is beyond the threshold of entities we provide this link so that the user can request and get all the data of the case with one additional call. This data will be zipped and sent via a webhoook.',
        examples=['https://enterpriseapi.unicourt.com/caseExport/CASEgued96d541f794'],
    )
    filedDate: datetime = Field(
        ...,
        description='Filing date for the case provided by the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    firstFetchDate: datetime = Field(
        ...,
        description='The date and time when the case was first fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,.',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    hasDocumentsWithPreview: bool = Field(
        ...,
        description='This field will be set to TRUE if atleast one document has a preview.',
        examples=[True],
    )
    hasOnlyMetaInfo: bool = Field(
        ...,
        description='This field determines if this case object has only meta information. If the value is true and if the full information is required you would need to call the updateCase API.',
        examples=[False],
    )
    hearings: Hearings
    judges: Judges
    lastFetchDate: datetime = Field(
        ...,
        description='The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    lastFetchDateWithUpdates: datetime = Field(
        ...,
        description='The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    object: constr(min_length=4, max_length=4) = Field(
        ..., description='Name of the object'
    )
    participantsLastFetchDate: datetime = Field(
        ...,
        description='The date and time when parties/attorneys were last updated from the Court. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: This is currently applicable for Federal PACER cases since we have an option to exclude parties and fetch only latest docket entries when updating cases to save PACER fees.',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    parties: Parties
    relatedCases: RelatedCases
    sourceCaseData: SourceCaseData
    sourceDataStatus: SourceDataStatus = Field(
        ...,
        description='The status of source data of case. If the value of sourceDataStatus is SOURCE_DEPRECATED then it means that the Case has been migrated from old court site to a new court site and the data being shown in the API response is from a old court site. If the sourceDataStatus is NO_LONGER_AVAILABLE_IN_COURT then it means that a particular case is invalid in the court site.',
        examples=['SOURCE_DEPRECATED'],
    )
    url: AnyUrl = Field(
        ...,
        description='URL to the case page in UniCourt Application.',
        examples=[
            'https://unicourt.com/case/pc-bk1-osceola-clinic-pharmacy-llc-do-not-docket-in-this-case-jointly-administered-under-17-32186-this-message-does-not-apply-to-proofs-of-claims-271749'
        ],
    )


class CaseTrack(BaseModel):
    case: Case
    caseAPI: AnyUrl = Field(
        ..., examples=['https://enterpriseapi.unicourt.com/case/CASEgq222a2d1239af']
    )
    caseId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for a Case in UniCourt.',
        examples=['CASEhq9d8b72d0800c'],
    )
    lastFetchDate: datetime = Field(
        ...,
        description='The date and time when the case was last fetched from the Court. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz, Note: It is not necessary that every time the case is fetched from Court we find changes in the case information. It could be that we already have the latest information from the Court and no changes exist.',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    lastFetchDateWithUpdates: datetime = Field(
        ...,
        description='The date and time when the case was last fetched from the Court where we found changes in the case information. This date and time is in UTC. Formatted as YYYY-MM-DDTHH:MM:SS+ZZ:zz,',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    lastTrackedDetails: LastTrackedDetails
    object: constr(min_length=9, max_length=9) = Field(
        ..., description='Name of the object.', examples=['CaseTrack']
    )
    pacerOptions: CaseUpdatePacerOptionsResponse
    schedule: Schedule


class CaseUpdate(BaseModel):
    case: Case
    caseAPI: AnyUrl = Field(
        ..., examples=['https://enterpriseapi.unicourt.com/case/CASEgq222a2d1239af']
    )
    caseId: constr(min_length=18, max_length=18) = Field(
        ...,
        description='Unique Id for a Case in UniCourt.',
        examples=['CASEhq9d8b72d0800c'],
    )
    exception: Exception
    object: constr(min_length=10, max_length=10) = Field(
        ..., description='Name of the object.', examples=['CaseUpdate']
    )
    pacerOptions: CaseUpdatePacerOptionsResponse
    requestedDate: datetime = Field(
        ...,
        description='The date and time when the case was last requested for update ',
        examples=['2020-05-16T11:51:27+00:00'],
    )
    status: Status1 = Field(
        ..., description='Status of the request.', examples=['COMPLETE']
    )


class NormLawFirm(BaseModel):
    caseAnalyticsAPI: CaseAnalyticsAPI
    caseSearchAPI: AnyUrl
    lawFirmAnalyticsAPI: LawFirmAnalyticsAPI
    name: constr(max_length=500)
    normLawFirmId: constr(min_length=18, max_length=18)
    normOrganizationData: NormOrganization
    object: constr(max_length=11)
